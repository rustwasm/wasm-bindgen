use super::*;
#[allow(bad_style)]
#[derive(Debug, Clone, PartialEq, Eq)]
#[doc = "The `Window` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window)\n\n*This API requires the following crate features to be activated: `Window`*"]
#[repr(transparent)]
#[allow(clippy::all)]
pub struct Window {
    obj: EventTarget,
}
#[allow(bad_style)]
#[allow(clippy::all)]
const __wbg_generated_const_Window: () = {
    use wasm_bindgen::__rt::core;
    use wasm_bindgen::convert::RefFromWasmAbi;
    use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
    use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
    use wasm_bindgen::describe::WasmDescribe;
    use wasm_bindgen::{JsCast, JsValue};
    impl WasmDescribe for Window {
        fn describe() {
            use wasm_bindgen::describe::*;
            inform(NAMED_ANYREF);
            inform(6u32);
            inform(87u32);
            inform(105u32);
            inform(110u32);
            inform(100u32);
            inform(111u32);
            inform(119u32);
        }
    }
    impl core::ops::Deref for Window {
        type Target = EventTarget;
        #[inline]
        fn deref(&self) -> &EventTarget {
            &self.obj
        }
    }
    impl IntoWasmAbi for Window {
        type Abi = <JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            self.obj.into_abi()
        }
    }
    impl OptionIntoWasmAbi for Window {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl<'a> OptionIntoWasmAbi for &'a Window {
        #[inline]
        fn none() -> Self::Abi {
            0
        }
    }
    impl FromWasmAbi for Window {
        type Abi = <JsValue as FromWasmAbi>::Abi;
        #[inline]
        unsafe fn from_abi(js: Self::Abi) -> Self {
            Window {
                obj: JsValue::from_abi(js).into(),
            }
        }
    }
    impl OptionFromWasmAbi for Window {
        #[inline]
        fn is_none(abi: &Self::Abi) -> bool {
            *abi == 0
        }
    }
    impl<'a> IntoWasmAbi for &'a Window {
        type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
        #[inline]
        fn into_abi(self) -> Self::Abi {
            (&self.obj).into_abi()
        }
    }
    impl RefFromWasmAbi for Window {
        type Abi = <JsValue as RefFromWasmAbi>::Abi;
        type Anchor = core::mem::ManuallyDrop<Window>;
        #[inline]
        unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
            let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
            core::mem::ManuallyDrop::new(Window {
                obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
            })
        }
    }
    impl From<JsValue> for Window {
        #[inline]
        fn from(obj: JsValue) -> Window {
            Window { obj: obj.into() }
        }
    }
    impl AsRef<JsValue> for Window {
        #[inline]
        fn as_ref(&self) -> &JsValue {
            self.obj.as_ref()
        }
    }
    impl AsRef<Window> for Window {
        #[inline]
        fn as_ref(&self) -> &Window {
            self
        }
    }
    impl From<Window> for JsValue {
        #[inline]
        fn from(obj: Window) -> JsValue {
            obj.obj.into()
        }
    }
    impl JsCast for Window {
        fn instanceof(val: &JsValue) -> bool {
            #[link(wasm_import_module = "__wbindgen_placeholder__")]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            extern "C" {
                fn __widl_instanceof_Window(val: u32) -> u32;
            }
            #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
            unsafe fn __widl_instanceof_Window(_: u32) -> u32 {
                panic!("cannot check instanceof on non-wasm targets");
            }
            unsafe {
                let idx = val.into_abi();
                __widl_instanceof_Window(idx) != 0
            }
        }
        #[inline]
        fn unchecked_from_js(val: JsValue) -> Self {
            Window { obj: val.into() }
        }
        #[inline]
        fn unchecked_from_js_ref(val: &JsValue) -> &Self {
            unsafe { &*(val as *const JsValue as *const Window) }
        }
    }
    ()
};
#[allow(clippy::all)]
impl From<Window> for EventTarget {
    #[inline]
    fn from(obj: Window) -> EventTarget {
        use wasm_bindgen::JsCast;
        EventTarget::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<EventTarget> for Window {
    #[inline]
    fn as_ref(&self) -> &EventTarget {
        use wasm_bindgen::JsCast;
        EventTarget::unchecked_from_js_ref(self.as_ref())
    }
}
#[allow(clippy::all)]
impl From<Window> for ::js_sys::Object {
    #[inline]
    fn from(obj: Window) -> ::js_sys::Object {
        use wasm_bindgen::JsCast;
        ::js_sys::Object::unchecked_from_js(obj.into())
    }
}
#[allow(clippy::all)]
impl AsRef<::js_sys::Object> for Window {
    #[inline]
    fn as_ref(&self) -> &::js_sys::Object {
        use wasm_bindgen::JsCast;
        ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_alert_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn alert(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_alert_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_alert_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_alert_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_alert_with_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn alert_with_message(&self, message: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_alert_with_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_alert_with_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(message);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                __widl_f_alert_with_message_Window(self_, message)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_blur_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `blur()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn blur(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_blur_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_blur_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_blur_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_cancel_animation_frame_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `cancelAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn cancel_animation_frame(&self, handle: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_cancel_animation_frame_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_cancel_animation_frame_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_cancel_animation_frame_Window(self_, handle)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_cancel_idle_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `cancelIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn cancel_idle_callback(&self, handle: u32) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_cancel_idle_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_cancel_idle_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_cancel_idle_callback_Window(self_, handle)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_capture_events_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `captureEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn capture_events(&self) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_capture_events_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_capture_events_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_capture_events_Window(self_)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_close_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `close()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn close(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_close_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_close_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_close_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_confirm_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn confirm(&self) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_confirm_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_confirm_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_confirm_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_confirm_with_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn confirm_with_message(&self, message: &str) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_confirm_with_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_confirm_with_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(message);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                __widl_f_confirm_with_message_Window(self_, message)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_focus_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `focus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn focus(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_focus_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_focus_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_focus_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(
    feature = "CssStyleDeclaration",
    feature = "Element",
    feature = "Window",
))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_computed_style_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&Element as WasmDescribe>::describe();
    <Option<CssStyleDeclaration> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(
        feature = "CssStyleDeclaration",
        feature = "Element",
        feature = "Window",
    ))]
    #[allow(bad_style)]
    #[doc = "The `getComputedStyle()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle)\n\n*This API requires the following crate features to be activated: `CssStyleDeclaration`, `Element`, `Window`*"]
    #[allow(clippy::all)]
    pub fn get_computed_style(
        &self,
        elt: &Element,
    ) -> Result<Option<CssStyleDeclaration>, ::wasm_bindgen::JsValue> {
        #[cfg(all(
            feature = "CssStyleDeclaration",
            feature = "Element",
            feature = "Window",
        ))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_computed_style_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                elt: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<CssStyleDeclaration> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_computed_style_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            elt: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<CssStyleDeclaration> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(elt);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let elt = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(elt);
                __widl_f_get_computed_style_Window(self_, elt)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<CssStyleDeclaration> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(
    feature = "CssStyleDeclaration",
    feature = "Element",
    feature = "Window",
))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_computed_style_with_pseudo_elt_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&Element as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<CssStyleDeclaration> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(
        feature = "CssStyleDeclaration",
        feature = "Element",
        feature = "Window",
    ))]
    #[allow(bad_style)]
    #[doc = "The `getComputedStyle()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle)\n\n*This API requires the following crate features to be activated: `CssStyleDeclaration`, `Element`, `Window`*"]
    #[allow(clippy::all)]
    pub fn get_computed_style_with_pseudo_elt(
        &self,
        elt: &Element,
        pseudo_elt: &str,
    ) -> Result<Option<CssStyleDeclaration>, ::wasm_bindgen::JsValue> {
        #[cfg(all(
            feature = "CssStyleDeclaration",
            feature = "Element",
            feature = "Window",
        ))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_computed_style_with_pseudo_elt_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                elt: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                pseudo_elt: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<CssStyleDeclaration> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_computed_style_with_pseudo_elt_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            elt: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            pseudo_elt: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<CssStyleDeclaration> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(elt);
            drop(pseudo_elt);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let elt = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(elt);
                let pseudo_elt = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pseudo_elt);
                __widl_f_get_computed_style_with_pseudo_elt_Window(self_, elt, pseudo_elt)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<CssStyleDeclaration> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Selection", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_selection_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Selection> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Selection", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `getSelection()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection)\n\n*This API requires the following crate features to be activated: `Selection`, `Window`*"]
    #[allow(clippy::all)]
    pub fn get_selection(&self) -> Result<Option<Selection>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Selection", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_selection_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Selection> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_selection_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Selection> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_get_selection_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Selection> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "MediaQueryList", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_match_media_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<MediaQueryList> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "MediaQueryList", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `matchMedia()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)\n\n*This API requires the following crate features to be activated: `MediaQueryList`, `Window`*"]
    #[allow(clippy::all)]
    pub fn match_media(
        &self,
        query: &str,
    ) -> Result<Option<MediaQueryList>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "MediaQueryList", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_match_media_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                query: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<MediaQueryList> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_match_media_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            query: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<MediaQueryList> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(query);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let query = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(query);
                __widl_f_match_media_Window(self_, query)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<MediaQueryList> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_move_by_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `moveBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn move_by(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_move_by_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_move_by_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_move_by_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_move_to_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn move_to(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_move_to_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_move_to_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_move_to_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open(&self) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_open_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open_with_url(&self, url: &str) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_with_url_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_with_url_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(url);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                __widl_f_open_with_url_Window(self_, url)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open_with_url_and_target(
        &self,
        url: &str,
        target: &str,
    ) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_with_url_and_target_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_with_url_and_target_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(url);
            drop(target);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                let target = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                __widl_f_open_with_url_and_target_Window(self_, url, target)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_and_features_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn open_with_url_and_target_and_features(
        &self,
        url: &str,
        target: &str,
        features: &str,
    ) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_open_with_url_and_target_and_features_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                features: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_open_with_url_and_target_and_features_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            features: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(url);
            drop(target);
            drop(features);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                let target = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                let features = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(features);
                __widl_f_open_with_url_and_target_and_features_Window(self_, url, target, features)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_post_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn post_message(
        &self,
        message: &::wasm_bindgen::JsValue,
        target_origin: &str,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_post_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_post_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(message);
            drop(target_origin);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        message,
                    );
                let target_origin =
                    <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target_origin);
                __widl_f_post_message_Window(self_, message, target_origin)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_post_message_with_transfer_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn post_message_with_transfer(
        &self,
        message: &::wasm_bindgen::JsValue,
        target_origin: &str,
        transfer: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_post_message_with_transfer_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                transfer: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_post_message_with_transfer_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            transfer: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(message);
            drop(target_origin);
            drop(transfer);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        message,
                    );
                let target_origin =
                    <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target_origin);
                let transfer =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        transfer,
                    );
                __widl_f_post_message_with_transfer_Window(self_, message, target_origin, transfer)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_print_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `print()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn print(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_print_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_print_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_print_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prompt_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn prompt(&self) -> Result<Option<String>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prompt_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prompt_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_prompt_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn prompt_with_message(
        &self,
        message: &str,
    ) -> Result<Option<String>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prompt_with_message_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prompt_with_message_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(message);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                __widl_f_prompt_with_message_Window(self_, message)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_and_default_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<String> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn prompt_with_message_and_default(
        &self,
        message: &str,
        default: &str,
    ) -> Result<Option<String>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_prompt_with_message_and_default_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                default: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_prompt_with_message_and_default_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            default: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(message);
            drop(default);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let message = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                let default = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(default);
                __widl_f_prompt_with_message_and_default_Window(self_, message, default)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_release_events_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `releaseEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn release_events(&self) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_release_events_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_release_events_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_release_events_Window(self_)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_request_animation_frame_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `requestAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn request_animation_frame(
        &self,
        callback: &::js_sys::Function,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_request_animation_frame_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_request_animation_frame_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(callback);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                __widl_f_request_animation_frame_Window(self_, callback)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_request_idle_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `requestIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn request_idle_callback(
        &self,
        callback: &::js_sys::Function,
    ) -> Result<u32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_request_idle_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_request_idle_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(callback);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                __widl_f_request_idle_callback_Window(self_, callback)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "IdleRequestOptions", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_request_idle_callback_with_options_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <&IdleRequestOptions as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "IdleRequestOptions", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `requestIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\n\n*This API requires the following crate features to be activated: `IdleRequestOptions`, `Window`*"]
    #[allow(clippy::all)]
    pub fn request_idle_callback_with_options(
        &self,
        callback: &::js_sys::Function,
        options: &IdleRequestOptions,
    ) -> Result<u32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "IdleRequestOptions", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_request_idle_callback_with_options_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                options: <&IdleRequestOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_request_idle_callback_with_options_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            options: <&IdleRequestOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(callback);
            drop(options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let callback =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(callback);
                let options =
                    <&IdleRequestOptions as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                __widl_f_request_idle_callback_with_options_Window(self_, callback, options)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_resize_by_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `resizeBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn resize_by(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_resize_by_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_resize_by_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_resize_by_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_resize_to_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `resizeTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn resize_to(&self, x: i32, y: i32) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_resize_to_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_resize_to_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_resize_to_Window(self_, x, y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_with_x_and_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_with_x_and_y(&self, x: f64, y: f64) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_with_x_and_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_with_x_and_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_with_x_and_y_Window(self_, x, y)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll(&self) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_Window(self_)
            };
            ()
        }
    }
}
#[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_with_scroll_to_options_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&ScrollToOptions as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `ScrollToOptions`, `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_with_scroll_to_options(&self, options: &ScrollToOptions) {
        #[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_with_scroll_to_options_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                options: <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_with_scroll_to_options_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            options: <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let options =
                    <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                __widl_f_scroll_with_scroll_to_options_Window(self_, options)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_with_x_and_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_by_with_x_and_y(&self, x: f64, y: f64) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_by_with_x_and_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_by_with_x_and_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_by_with_x_and_y_Window(self_, x, y)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_by(&self) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_by_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_by_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_by_Window(self_)
            };
            ()
        }
    }
}
#[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_with_scroll_to_options_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&ScrollToOptions as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `ScrollToOptions`, `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_by_with_scroll_to_options(&self, options: &ScrollToOptions) {
        #[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_by_with_scroll_to_options_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                options: <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_by_with_scroll_to_options_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            options: <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let options =
                    <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                __widl_f_scroll_by_with_scroll_to_options_Window(self_, options)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_with_x_and_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_to_with_x_and_y(&self, x: f64, y: f64) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_to_with_x_and_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_to_with_x_and_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(x);
            drop(y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                __widl_f_scroll_to_with_x_and_y_Window(self_, x, y)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_to(&self) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_to_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_to_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_to_Window(self_)
            };
            ()
        }
    }
}
#[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_with_scroll_to_options_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&ScrollToOptions as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `ScrollToOptions`, `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_to_with_scroll_to_options(&self, options: &ScrollToOptions) {
        #[cfg(all(feature = "ScrollToOptions", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_to_with_scroll_to_options_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                options: <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_to_with_scroll_to_options_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            options: <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(options);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let options =
                    <&ScrollToOptions as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                __widl_f_scroll_to_with_scroll_to_options_Window(self_, options)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_stop_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `stop()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn stop(&self) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_stop_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_stop_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_stop_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_get_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <Option<::js_sys::Object> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The indexing getter\n\n\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn get(&self, name: &str) -> Option<::js_sys::Object> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_get_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_get_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_get_Window(self_, name)
            };
            <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_window_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Window as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `window` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn window(&self) -> Window {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_window_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_window_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_window_Window(self_)
            };
            <Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_self_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Window as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `self` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn self_(&self) -> Window {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_self_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_self_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_self_Window(self_)
            };
            <Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Document", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_document_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Document> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Document", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `document` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)\n\n*This API requires the following crate features to be activated: `Document`, `Window`*"]
    #[allow(clippy::all)]
    pub fn document(&self) -> Option<Document> {
        #[cfg(all(feature = "Document", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_document_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_document_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_document_Window(self_)
            };
            <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_name_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn name(&self) -> Result<String, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_name_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_name_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_name_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_name_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `name` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_name(&self, name: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_name_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_name_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(name);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                __widl_f_set_name_Window(self_, name)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Location", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_location_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Location as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Location", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `location` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/location)\n\n*This API requires the following crate features to be activated: `Location`, `Window`*"]
    #[allow(clippy::all)]
    pub fn location(&self) -> Location {
        #[cfg(all(feature = "Location", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_location_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Location as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_location_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Location as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_location_Window(self_)
            };
            <Location as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "History", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_history_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <History as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "History", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `history` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/history)\n\n*This API requires the following crate features to be activated: `History`, `Window`*"]
    #[allow(clippy::all)]
    pub fn history(&self) -> Result<History, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "History", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_history_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <History as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_history_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <History as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_history_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<History as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "CustomElementRegistry", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_custom_elements_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <CustomElementRegistry as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "CustomElementRegistry", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `customElements` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements)\n\n*This API requires the following crate features to be activated: `CustomElementRegistry`, `Window`*"]
    #[allow(clippy::all)]
    pub fn custom_elements(&self) -> CustomElementRegistry {
        #[cfg(all(feature = "CustomElementRegistry", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_custom_elements_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <CustomElementRegistry as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_custom_elements_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <CustomElementRegistry as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_custom_elements_Window(self_)
            };
            <CustomElementRegistry as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "BarProp", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_locationbar_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <BarProp as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "BarProp", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `locationbar` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar)\n\n*This API requires the following crate features to be activated: `BarProp`, `Window`*"]
    #[allow(clippy::all)]
    pub fn locationbar(&self) -> Result<BarProp, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "BarProp", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_locationbar_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_locationbar_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_locationbar_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<BarProp as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "BarProp", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_menubar_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <BarProp as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "BarProp", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `menubar` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar)\n\n*This API requires the following crate features to be activated: `BarProp`, `Window`*"]
    #[allow(clippy::all)]
    pub fn menubar(&self) -> Result<BarProp, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "BarProp", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_menubar_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_menubar_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_menubar_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<BarProp as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "BarProp", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_personalbar_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <BarProp as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "BarProp", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `personalbar` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar)\n\n*This API requires the following crate features to be activated: `BarProp`, `Window`*"]
    #[allow(clippy::all)]
    pub fn personalbar(&self) -> Result<BarProp, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "BarProp", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_personalbar_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_personalbar_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_personalbar_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<BarProp as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "BarProp", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scrollbars_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <BarProp as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "BarProp", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollbars` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars)\n\n*This API requires the following crate features to be activated: `BarProp`, `Window`*"]
    #[allow(clippy::all)]
    pub fn scrollbars(&self) -> Result<BarProp, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "BarProp", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scrollbars_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scrollbars_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scrollbars_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<BarProp as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "BarProp", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_statusbar_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <BarProp as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "BarProp", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `statusbar` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar)\n\n*This API requires the following crate features to be activated: `BarProp`, `Window`*"]
    #[allow(clippy::all)]
    pub fn statusbar(&self) -> Result<BarProp, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "BarProp", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_statusbar_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_statusbar_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_statusbar_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<BarProp as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "BarProp", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_toolbar_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <BarProp as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "BarProp", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `toolbar` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar)\n\n*This API requires the following crate features to be activated: `BarProp`, `Window`*"]
    #[allow(clippy::all)]
    pub fn toolbar(&self) -> Result<BarProp, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "BarProp", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_toolbar_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_toolbar_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <BarProp as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_toolbar_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<BarProp as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_status_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `status` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn status(&self) -> Result<String, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_status_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_status_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_status_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_status_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `status` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_status(&self, status: &str) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_status_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                status: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_status_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            status: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(status);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let status = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(status);
                __widl_f_set_status_Window(self_, status)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_closed_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `closed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn closed(&self) -> Result<bool, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_closed_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_closed_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_closed_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_event_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `event` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn event(&self) -> ::wasm_bindgen::JsValue {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_event_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_event_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_event_Window(self_)
            };
            <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_frames_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Window as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `frames` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn frames(&self) -> Result<Window, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_frames_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_frames_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_frames_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_length_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <u32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `length` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn length(&self) -> u32 {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_length_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_length_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_length_Window(self_)
            };
            <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_top_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `top` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn top(&self) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_top_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_top_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_top_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_opener_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `opener` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn opener(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_opener_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_opener_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_opener_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_opener_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `opener` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_opener(
        &self,
        opener: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_opener_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                opener: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_opener_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            opener: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(opener);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let opener =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        opener,
                    );
                __widl_f_set_opener_Window(self_, opener)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_parent_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Window> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `parent` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn parent(&self) -> Result<Option<Window>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_parent_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_parent_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_parent_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Element", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_frame_element_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Element> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Element", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `frameElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement)\n\n*This API requires the following crate features to be activated: `Element`, `Window`*"]
    #[allow(clippy::all)]
    pub fn frame_element(&self) -> Result<Option<Element>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Element", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_frame_element_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_frame_element_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_frame_element_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Navigator", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_navigator_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Navigator as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Navigator", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `navigator` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator)\n\n*This API requires the following crate features to be activated: `Navigator`, `Window`*"]
    #[allow(clippy::all)]
    pub fn navigator(&self) -> Navigator {
        #[cfg(all(feature = "Navigator", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_navigator_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Navigator as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_navigator_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Navigator as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_navigator_Window(self_)
            };
            <Navigator as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "External", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_external_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <External as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "External", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `external` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/external)\n\n*This API requires the following crate features to be activated: `External`, `Window`*"]
    #[allow(clippy::all)]
    pub fn external(&self) -> Result<External, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "External", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_external_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <External as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_external_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <External as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_external_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<External as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onappinstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onappinstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onappinstalled(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onappinstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onappinstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onappinstalled_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onappinstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onappinstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onappinstalled(&self, onappinstalled: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onappinstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onappinstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onappinstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onappinstalled : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onappinstalled);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onappinstalled =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onappinstalled,
                    );
                __widl_f_set_onappinstalled_Window(self_, onappinstalled)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Screen", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_screen_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Screen as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Screen", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `screen` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screen)\n\n*This API requires the following crate features to be activated: `Screen`, `Window`*"]
    #[allow(clippy::all)]
    pub fn screen(&self) -> Result<Screen, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Screen", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_screen_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Screen as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_screen_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Screen as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_screen_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Screen as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_inner_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `innerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn inner_width(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_inner_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_inner_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_inner_width_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_inner_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `innerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_inner_width(
        &self,
        inner_width: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_inner_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                inner_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_inner_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            inner_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(inner_width);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let inner_width =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        inner_width,
                    );
                __widl_f_set_inner_width_Window(self_, inner_width)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_inner_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `innerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn inner_height(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_inner_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_inner_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_inner_height_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_inner_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `innerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_inner_height(
        &self,
        inner_height: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_inner_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                inner_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_inner_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            inner_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(inner_height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let inner_height =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        inner_height,
                    );
                __widl_f_set_inner_height_Window(self_, inner_height)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_x_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_x(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_x_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_x_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_x_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_page_x_offset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `pageXOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn page_x_offset(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_page_x_offset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_page_x_offset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_page_x_offset_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_scroll_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `scrollY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn scroll_y(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_scroll_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_scroll_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_scroll_y_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_page_y_offset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `pageYOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn page_y_offset(&self) -> Result<f64, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_page_y_offset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_page_y_offset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_page_y_offset_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_screen_x_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `screenX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn screen_x(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_screen_x_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_screen_x_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_screen_x_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_screen_x_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `screenX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_screen_x(
        &self,
        screen_x: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_screen_x_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                screen_x: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_screen_x_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            screen_x: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(screen_x);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let screen_x =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        screen_x,
                    );
                __widl_f_set_screen_x_Window(self_, screen_x)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_screen_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `screenY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn screen_y(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_screen_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_screen_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_screen_y_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_screen_y_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `screenY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_screen_y(
        &self,
        screen_y: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_screen_y_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                screen_y: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_screen_y_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            screen_y: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(screen_y);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let screen_y =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        screen_y,
                    );
                __widl_f_set_screen_y_Window(self_, screen_y)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_outer_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `outerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn outer_width(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_outer_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_outer_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_outer_width_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_outer_width_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `outerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_outer_width(
        &self,
        outer_width: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_outer_width_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                outer_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_outer_width_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            outer_width: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(outer_width);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let outer_width =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        outer_width,
                    );
                __widl_f_set_outer_width_Window(self_, outer_width)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_outer_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <::wasm_bindgen::JsValue as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `outerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn outer_height(&self) -> Result<::wasm_bindgen::JsValue, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_outer_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_outer_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_outer_height_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_outer_height_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `outerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_outer_height(
        &self,
        outer_height: &::wasm_bindgen::JsValue,
    ) -> Result<(), ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_outer_height_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                outer_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_outer_height_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            outer_height: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(outer_height);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let outer_height =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        outer_height,
                    );
                __widl_f_set_outer_height_Window(self_, outer_height)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(())
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_device_pixel_ratio_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <f64 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `devicePixelRatio` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn device_pixel_ratio(&self) -> f64 {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_device_pixel_ratio_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_device_pixel_ratio_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_device_pixel_ratio_Window(self_)
            };
            <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Performance", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_performance_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Performance> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Performance", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `performance` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/performance)\n\n*This API requires the following crate features to be activated: `Performance`, `Window`*"]
    #[allow(clippy::all)]
    pub fn performance(&self) -> Option<Performance> {
        #[cfg(all(feature = "Performance", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_performance_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Performance> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_performance_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Performance> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_performance_Window(self_)
            };
            <Option<Performance> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_orientation_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <i16 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `orientation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn orientation(&self) -> i16 {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_orientation_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_orientation_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i16 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_orientation_Window(self_)
            };
            <i16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onorientationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onorientationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onorientationchange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onorientationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onorientationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onorientationchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onorientationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onorientationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onorientationchange(&self, onorientationchange: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onorientationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onorientationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onorientationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onorientationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onorientationchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onorientationchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onorientationchange,
                    );
                __widl_f_set_onorientationchange_Window(self_, onorientationchange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplayconnect(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplayconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplayconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplayconnect_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplayconnect(&self, onvrdisplayconnect: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplayconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplayconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplayconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplayconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplayconnect);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplayconnect =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplayconnect,
                    );
                __widl_f_set_onvrdisplayconnect_Window(self_, onvrdisplayconnect)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydisconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydisconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplaydisconnect(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplaydisconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplaydisconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplaydisconnect_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydisconnect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydisconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplaydisconnect(&self, onvrdisplaydisconnect: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplaydisconnect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplaydisconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplaydisconnect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplaydisconnect : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplaydisconnect);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplaydisconnect =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplaydisconnect,
                    );
                __widl_f_set_onvrdisplaydisconnect_Window(self_, onvrdisplaydisconnect)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplayactivate(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplayactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplayactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplayactivate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplayactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplayactivate(&self, onvrdisplayactivate: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplayactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplayactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplayactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplayactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplayactivate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplayactivate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplayactivate,
                    );
                __widl_f_set_onvrdisplayactivate_Window(self_, onvrdisplayactivate)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydeactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydeactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplaydeactivate(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplaydeactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplaydeactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplaydeactivate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydeactivate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaydeactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplaydeactivate(&self, onvrdisplaydeactivate: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplaydeactivate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplaydeactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplaydeactivate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplaydeactivate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplaydeactivate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplaydeactivate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplaydeactivate,
                    );
                __widl_f_set_onvrdisplaydeactivate_Window(self_, onvrdisplaydeactivate)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaypresentchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaypresentchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvrdisplaypresentchange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvrdisplaypresentchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvrdisplaypresentchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvrdisplaypresentchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaypresentchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvrdisplaypresentchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvrdisplaypresentchange(
        &self,
        onvrdisplaypresentchange: Option<&::js_sys::Function>,
    ) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvrdisplaypresentchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvrdisplaypresentchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvrdisplaypresentchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvrdisplaypresentchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvrdisplaypresentchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvrdisplaypresentchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvrdisplaypresentchange,
                    );
                __widl_f_set_onvrdisplaypresentchange_Window(self_, onvrdisplaypresentchange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window", feature = "Worklet",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_paint_worklet_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Worklet as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window", feature = "Worklet",))]
    #[allow(bad_style)]
    #[doc = "The `paintWorklet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/paintWorklet)\n\n*This API requires the following crate features to be activated: `Window`, `Worklet`*"]
    #[allow(clippy::all)]
    pub fn paint_worklet(&self) -> Result<Worklet, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window", feature = "Worklet",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_paint_worklet_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Worklet as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_paint_worklet_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Worklet as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_paint_worklet_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Worklet as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Crypto", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_crypto_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Crypto as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Crypto", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `crypto` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto)\n\n*This API requires the following crate features to be activated: `Crypto`, `Window`*"]
    #[allow(clippy::all)]
    pub fn crypto(&self) -> Result<Crypto, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Crypto", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_crypto_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Crypto as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_crypto_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Crypto as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_crypto_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Crypto as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onabort_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onabort(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onabort_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onabort_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onabort_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onabort_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onabort(&self, onabort: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onabort_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onabort: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onabort_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onabort: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onabort);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onabort =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onabort,
                    );
                __widl_f_set_onabort_Window(self_, onabort)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onblur_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onblur(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onblur_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onblur_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onblur_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onblur_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onblur(&self, onblur: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onblur_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onblur: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onblur_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onblur: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onblur);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onblur =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onblur,
                    );
                __widl_f_set_onblur_Window(self_, onblur)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onfocus_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onfocus(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onfocus_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onfocus_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onfocus_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onfocus_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onfocus(&self, onfocus: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onfocus_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onfocus: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onfocus_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onfocus: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onfocus);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onfocus =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onfocus,
                    );
                __widl_f_set_onfocus_Window(self_, onfocus)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onauxclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onauxclick(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onauxclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onauxclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onauxclick_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onauxclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onauxclick(&self, onauxclick: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onauxclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onauxclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onauxclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onauxclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onauxclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onauxclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onauxclick,
                    );
                __widl_f_set_onauxclick_Window(self_, onauxclick)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncanplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oncanplay(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncanplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncanplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncanplay_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oncanplay(&self, oncanplay: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncanplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncanplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncanplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncanplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncanplay);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncanplay =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncanplay,
                    );
                __widl_f_set_oncanplay_Window(self_, oncanplay)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncanplaythrough_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oncanplaythrough(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncanplaythrough_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncanplaythrough_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncanplaythrough_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplaythrough_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oncanplaythrough(&self, oncanplaythrough: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncanplaythrough_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncanplaythrough_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncanplaythrough : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(oncanplaythrough);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncanplaythrough =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncanplaythrough,
                    );
                __widl_f_set_oncanplaythrough_Window(self_, oncanplaythrough)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onchange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onchange(&self, onchange: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onchange,
                    );
                __widl_f_set_onchange_Window(self_, onchange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onclick(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onclick_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onclick(&self, onclick: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onclick,
                    );
                __widl_f_set_onclick_Window(self_, onclick)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onclose_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onclose(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onclose_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onclose_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onclose_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onclose_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onclose(&self, onclose: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onclose_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onclose: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onclose_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onclose: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onclose);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onclose =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onclose,
                    );
                __widl_f_set_onclose_Window(self_, onclose)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oncontextmenu_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oncontextmenu(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oncontextmenu_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oncontextmenu_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oncontextmenu_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oncontextmenu_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oncontextmenu(&self, oncontextmenu: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oncontextmenu_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oncontextmenu : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oncontextmenu_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oncontextmenu: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oncontextmenu);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oncontextmenu =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oncontextmenu,
                    );
                __widl_f_set_oncontextmenu_Window(self_, oncontextmenu)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondblclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondblclick(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondblclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondblclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondblclick_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondblclick_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondblclick(&self, ondblclick: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondblclick_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondblclick : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondblclick_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondblclick: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondblclick);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondblclick =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondblclick,
                    );
                __widl_f_set_ondblclick_Window(self_, ondblclick)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondrag_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondrag(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondrag_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondrag_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondrag_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondrag_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondrag(&self, ondrag: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondrag_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondrag: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondrag_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondrag: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondrag);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondrag =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondrag,
                    );
                __widl_f_set_ondrag_Window(self_, ondrag)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragend(&self, ondragend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragend,
                    );
                __widl_f_set_ondragend_Window(self_, ondragend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragenter(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragenter_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragenter(&self, ondragenter: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragenter: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragenter,
                    );
                __widl_f_set_ondragenter_Window(self_, ondragenter)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragexit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragexit(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragexit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragexit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragexit_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragexit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragexit(&self, ondragexit: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragexit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragexit : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragexit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragexit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragexit);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragexit =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragexit,
                    );
                __widl_f_set_ondragexit_Window(self_, ondragexit)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragleave(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragleave_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragleave(&self, ondragleave: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragleave: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragleave,
                    );
                __widl_f_set_ondragleave_Window(self_, ondragleave)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragover(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragover_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragover(&self, ondragover: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragover,
                    );
                __widl_f_set_ondragover_Window(self_, ondragover)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondragstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondragstart(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondragstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondragstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondragstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondragstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondragstart(&self, ondragstart: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondragstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondragstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondragstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondragstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondragstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondragstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondragstart,
                    );
                __widl_f_set_ondragstart_Window(self_, ondragstart)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondrop_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondrop(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondrop_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondrop_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondrop_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondrop_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondrop(&self, ondrop: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondrop_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondrop: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondrop_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondrop: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ondrop);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondrop =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondrop,
                    );
                __widl_f_set_ondrop_Window(self_, ondrop)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ondurationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ondurationchange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ondurationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ondurationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ondurationchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ondurationchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ondurationchange(&self, ondurationchange: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ondurationchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ondurationchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ondurationchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ondurationchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ondurationchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ondurationchange,
                    );
                __widl_f_set_ondurationchange_Window(self_, ondurationchange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onemptied_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onemptied(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onemptied_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onemptied_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onemptied_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onemptied_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onemptied(&self, onemptied: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onemptied_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onemptied: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onemptied_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onemptied: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onemptied);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onemptied =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onemptied,
                    );
                __widl_f_set_onemptied_Window(self_, onemptied)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onended_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onended(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onended_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onended_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onended_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onended_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onended(&self, onended: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onended_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onended_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onended: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onended);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onended =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onended,
                    );
                __widl_f_set_onended_Window(self_, onended)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oninput_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oninput(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oninput_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oninput_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oninput_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oninput_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oninput(&self, oninput: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oninput_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oninput: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oninput_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oninput: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oninput);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oninput =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oninput,
                    );
                __widl_f_set_oninput_Window(self_, oninput)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_oninvalid_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn oninvalid(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_oninvalid_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_oninvalid_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_oninvalid_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_oninvalid_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_oninvalid(&self, oninvalid: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_oninvalid_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                oninvalid: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_oninvalid_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            oninvalid: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(oninvalid);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let oninvalid =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        oninvalid,
                    );
                __widl_f_set_oninvalid_Window(self_, oninvalid)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeydown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onkeydown(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeydown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeydown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeydown_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeydown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onkeydown(&self, onkeydown: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeydown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeydown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeydown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeydown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeydown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeydown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeydown,
                    );
                __widl_f_set_onkeydown_Window(self_, onkeydown)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeypress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onkeypress(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeypress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeypress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeypress_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeypress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onkeypress(&self, onkeypress: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeypress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeypress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeypress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeypress: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeypress);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeypress =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeypress,
                    );
                __widl_f_set_onkeypress_Window(self_, onkeypress)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onkeyup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onkeyup(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onkeyup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onkeyup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onkeyup_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onkeyup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onkeyup(&self, onkeyup: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onkeyup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onkeyup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onkeyup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onkeyup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onkeyup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onkeyup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onkeyup,
                    );
                __widl_f_set_onkeyup_Window(self_, onkeyup)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onload(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onload_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onload(&self, onload: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onload);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onload =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onload,
                    );
                __widl_f_set_onload_Window(self_, onload)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadeddata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadeddata(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadeddata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadeddata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadeddata_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadeddata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadeddata(&self, onloadeddata: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadeddata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadeddata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadeddata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadeddata: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadeddata);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadeddata =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadeddata,
                    );
                __widl_f_set_onloadeddata_Window(self_, onloadeddata)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadedmetadata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadedmetadata(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadedmetadata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadedmetadata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadedmetadata_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadedmetadata_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadedmetadata(&self, onloadedmetadata: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadedmetadata_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadedmetadata_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadedmetadata : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onloadedmetadata);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadedmetadata =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadedmetadata,
                    );
                __widl_f_set_onloadedmetadata_Window(self_, onloadedmetadata)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadend(&self, onloadend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadend,
                    );
                __widl_f_set_onloadend_Window(self_, onloadend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onloadstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onloadstart(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onloadstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onloadstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onloadstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onloadstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onloadstart(&self, onloadstart: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onloadstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onloadstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onloadstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onloadstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onloadstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onloadstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onloadstart,
                    );
                __widl_f_set_onloadstart_Window(self_, onloadstart)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmousedown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmousedown(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmousedown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmousedown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmousedown_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmousedown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmousedown(&self, onmousedown: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmousedown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmousedown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmousedown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmousedown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmousedown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmousedown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmousedown,
                    );
                __widl_f_set_onmousedown_Window(self_, onmousedown)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseenter(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseenter_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseenter(&self, onmouseenter: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseenter: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseenter,
                    );
                __widl_f_set_onmouseenter_Window(self_, onmouseenter)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseleave(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseleave_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseleave(&self, onmouseleave: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseleave: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseleave,
                    );
                __widl_f_set_onmouseleave_Window(self_, onmouseleave)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmousemove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmousemove(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmousemove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmousemove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmousemove_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmousemove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmousemove(&self, onmousemove: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmousemove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmousemove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmousemove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmousemove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmousemove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmousemove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmousemove,
                    );
                __widl_f_set_onmousemove_Window(self_, onmousemove)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseout(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseout_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseout(&self, onmouseout: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseout: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseout =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseout,
                    );
                __widl_f_set_onmouseout_Window(self_, onmouseout)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseover(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseover_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseover(&self, onmouseover: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseover,
                    );
                __widl_f_set_onmouseover_Window(self_, onmouseover)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmouseup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmouseup(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmouseup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmouseup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmouseup_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmouseup(&self, onmouseup: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmouseup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmouseup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmouseup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmouseup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmouseup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmouseup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmouseup,
                    );
                __widl_f_set_onmouseup_Window(self_, onmouseup)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwheel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwheel(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwheel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwheel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwheel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwheel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwheel(&self, onwheel: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwheel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwheel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwheel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwheel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onwheel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwheel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwheel,
                    );
                __widl_f_set_onwheel_Window(self_, onwheel)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpause_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpause(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpause_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpause_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpause_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpause_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpause(&self, onpause: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpause_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpause: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpause_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpause: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpause);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpause =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpause,
                    );
                __widl_f_set_onpause_Window(self_, onpause)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onplay(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onplay_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onplay_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onplay(&self, onplay: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onplay_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onplay_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onplay: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onplay);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onplay =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onplay,
                    );
                __widl_f_set_onplay_Window(self_, onplay)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onplaying_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onplaying(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onplaying_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onplaying_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onplaying_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onplaying_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onplaying(&self, onplaying: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onplaying_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onplaying: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onplaying_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onplaying: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onplaying);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onplaying =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onplaying,
                    );
                __widl_f_set_onplaying_Window(self_, onplaying)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onprogress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onprogress(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onprogress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onprogress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onprogress_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onprogress_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onprogress(&self, onprogress: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onprogress_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onprogress : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onprogress_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onprogress: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onprogress);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onprogress =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onprogress,
                    );
                __widl_f_set_onprogress_Window(self_, onprogress)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onratechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onratechange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onratechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onratechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onratechange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onratechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onratechange(&self, onratechange: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onratechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onratechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onratechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onratechange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onratechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onratechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onratechange,
                    );
                __widl_f_set_onratechange_Window(self_, onratechange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onreset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onreset(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onreset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onreset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onreset_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onreset_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onreset(&self, onreset: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onreset_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onreset: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onreset_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onreset: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onreset);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onreset =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onreset,
                    );
                __widl_f_set_onreset_Window(self_, onreset)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onresize_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onresize(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onresize_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onresize_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onresize_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onresize_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onresize(&self, onresize: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onresize_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onresize: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onresize_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onresize: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onresize);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onresize =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onresize,
                    );
                __widl_f_set_onresize_Window(self_, onresize)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onscroll_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onscroll(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onscroll_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onscroll_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onscroll_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onscroll_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onscroll(&self, onscroll: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onscroll_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onscroll: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onscroll_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onscroll: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onscroll);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onscroll =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onscroll,
                    );
                __widl_f_set_onscroll_Window(self_, onscroll)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onseeked_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onseeked(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onseeked_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onseeked_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onseeked_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onseeked_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onseeked(&self, onseeked: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onseeked_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onseeked: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onseeked_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onseeked: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onseeked);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onseeked =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onseeked,
                    );
                __widl_f_set_onseeked_Window(self_, onseeked)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onseeking_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onseeking(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onseeking_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onseeking_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onseeking_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onseeking_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onseeking(&self, onseeking: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onseeking_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onseeking: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onseeking_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onseeking: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onseeking);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onseeking =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onseeking,
                    );
                __widl_f_set_onseeking_Window(self_, onseeking)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onselect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onselect(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onselect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onselect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onselect_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onselect_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onselect(&self, onselect: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onselect_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onselect: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onselect_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onselect: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onselect);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onselect =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onselect,
                    );
                __widl_f_set_onselect_Window(self_, onselect)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onshow(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onshow_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onshow(&self, onshow: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onshow);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onshow =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onshow,
                    );
                __widl_f_set_onshow_Window(self_, onshow)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onstalled(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onstalled_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onstalled_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onstalled(&self, onstalled: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onstalled_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onstalled: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onstalled_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onstalled: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onstalled);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onstalled =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onstalled,
                    );
                __widl_f_set_onstalled_Window(self_, onstalled)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onsubmit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onsubmit(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onsubmit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onsubmit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onsubmit_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onsubmit_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onsubmit(&self, onsubmit: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onsubmit_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onsubmit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onsubmit_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onsubmit: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onsubmit);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onsubmit =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onsubmit,
                    );
                __widl_f_set_onsubmit_Window(self_, onsubmit)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onsuspend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onsuspend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onsuspend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onsuspend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onsuspend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onsuspend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onsuspend(&self, onsuspend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onsuspend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onsuspend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onsuspend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onsuspend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onsuspend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onsuspend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onsuspend,
                    );
                __widl_f_set_onsuspend_Window(self_, onsuspend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontimeupdate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontimeupdate(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontimeupdate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontimeupdate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontimeupdate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontimeupdate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontimeupdate(&self, ontimeupdate: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontimeupdate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontimeupdate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontimeupdate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontimeupdate: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontimeupdate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontimeupdate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontimeupdate,
                    );
                __widl_f_set_ontimeupdate_Window(self_, ontimeupdate)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onvolumechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onvolumechange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onvolumechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onvolumechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onvolumechange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onvolumechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onvolumechange(&self, onvolumechange: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onvolumechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onvolumechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onvolumechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onvolumechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onvolumechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onvolumechange,
                    );
                __widl_f_set_onvolumechange_Window(self_, onvolumechange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwaiting_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwaiting(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwaiting_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwaiting_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwaiting_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwaiting_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwaiting(&self, onwaiting: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwaiting_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwaiting: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwaiting_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwaiting: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onwaiting);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwaiting =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwaiting,
                    );
                __widl_f_set_onwaiting_Window(self_, onwaiting)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onselectstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onselectstart(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onselectstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onselectstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onselectstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onselectstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onselectstart(&self, onselectstart: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onselectstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onselectstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onselectstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onselectstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onselectstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onselectstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onselectstart,
                    );
                __widl_f_set_onselectstart_Window(self_, onselectstart)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontoggle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontoggle(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontoggle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontoggle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontoggle_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontoggle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontoggle(&self, ontoggle: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontoggle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontoggle: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontoggle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontoggle: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontoggle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontoggle =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontoggle,
                    );
                __widl_f_set_ontoggle_Window(self_, ontoggle)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointercancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointercancel(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointercancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointercancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointercancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointercancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointercancel(&self, onpointercancel: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointercancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointercancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointercancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointercancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointercancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointercancel,
                    );
                __widl_f_set_onpointercancel_Window(self_, onpointercancel)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerdown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerdown(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerdown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerdown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerdown_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerdown_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerdown(&self, onpointerdown: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerdown_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerdown : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerdown_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerdown: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerdown);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerdown =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerdown,
                    );
                __widl_f_set_onpointerdown_Window(self_, onpointerdown)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerup(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerup_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerup_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerup(&self, onpointerup: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerup_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerup : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerup_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerup: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerup);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerup =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerup,
                    );
                __widl_f_set_onpointerup_Window(self_, onpointerup)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointermove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointermove(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointermove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointermove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointermove_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointermove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointermove(&self, onpointermove: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointermove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointermove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointermove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointermove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointermove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointermove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointermove,
                    );
                __widl_f_set_onpointermove_Window(self_, onpointermove)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerout(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerout_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerout(&self, onpointerout: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerout : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerout: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerout =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerout,
                    );
                __widl_f_set_onpointerout_Window(self_, onpointerout)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerover(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerover_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerover_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerover(&self, onpointerover: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerover_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerover : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerover_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerover: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpointerover);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerover =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerover,
                    );
                __widl_f_set_onpointerover_Window(self_, onpointerover)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerenter(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerenter_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerenter_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerenter(&self, onpointerenter: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerenter_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerenter_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerenter : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerenter);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerenter =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerenter,
                    );
                __widl_f_set_onpointerenter_Window(self_, onpointerenter)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpointerleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpointerleave(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpointerleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpointerleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpointerleave_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerleave_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpointerleave(&self, onpointerleave: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpointerleave_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpointerleave_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpointerleave : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onpointerleave);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpointerleave =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpointerleave,
                    );
                __widl_f_set_onpointerleave_Window(self_, onpointerleave)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ongotpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ongotpointercapture(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ongotpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ongotpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ongotpointercapture_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ongotpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ongotpointercapture(&self, ongotpointercapture: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ongotpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ongotpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ongotpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ongotpointercapture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ongotpointercapture =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ongotpointercapture,
                    );
                __widl_f_set_ongotpointercapture_Window(self_, ongotpointercapture)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onlostpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onlostpointercapture(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onlostpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onlostpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onlostpointercapture_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onlostpointercapture_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onlostpointercapture(&self, onlostpointercapture: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onlostpointercapture_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onlostpointercapture_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onlostpointercapture : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onlostpointercapture);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onlostpointercapture =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onlostpointercapture,
                    );
                __widl_f_set_onlostpointercapture_Window(self_, onlostpointercapture)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationcancel(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationcancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationcancel(&self, onanimationcancel: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationcancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationcancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationcancel,
                    );
                __widl_f_set_onanimationcancel_Window(self_, onanimationcancel)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationend(&self, onanimationend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationend,
                    );
                __widl_f_set_onanimationend_Window(self_, onanimationend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationiteration(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationiteration_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationiteration(&self, onanimationiteration: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationiteration);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationiteration =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationiteration,
                    );
                __widl_f_set_onanimationiteration_Window(self_, onanimationiteration)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onanimationstart(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onanimationstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onanimationstart(&self, onanimationstart: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onanimationstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onanimationstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onanimationstart,
                    );
                __widl_f_set_onanimationstart_Window(self_, onanimationstart)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitioncancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitioncancel(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitioncancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitioncancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitioncancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitioncancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitioncancel(&self, ontransitioncancel: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitioncancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitioncancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitioncancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitioncancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitioncancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitioncancel,
                    );
                __widl_f_set_ontransitioncancel_Window(self_, ontransitioncancel)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitionend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionend(&self, ontransitionend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionend,
                    );
                __widl_f_set_ontransitionend_Window(self_, ontransitionend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionrun_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitionrun(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionrun_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionrun_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionrun_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionrun_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionrun(&self, ontransitionrun: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionrun_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionrun_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionrun : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionrun);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionrun =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionrun,
                    );
                __widl_f_set_ontransitionrun_Window(self_, ontransitionrun)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontransitionstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontransitionstart(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontransitionstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontransitionstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontransitionstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontransitionstart(&self, ontransitionstart: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontransitionstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontransitionstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontransitionstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(ontransitionstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontransitionstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontransitionstart,
                    );
                __widl_f_set_ontransitionstart_Window(self_, ontransitionstart)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationend(&self, onwebkitanimationend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationend,
                    );
                __widl_f_set_onwebkitanimationend_Window(self_, onwebkitanimationend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationiteration(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationiteration_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationiteration_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationiteration(
        &self,
        onwebkitanimationiteration: Option<&::js_sys::Function>,
    ) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationiteration_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationiteration_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationiteration : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationiteration);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationiteration =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationiteration,
                    );
                __widl_f_set_onwebkitanimationiteration_Window(self_, onwebkitanimationiteration)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkitanimationstart(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkitanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkitanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkitanimationstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkitanimationstart(&self, onwebkitanimationstart: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkitanimationstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkitanimationstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkitanimationstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkitanimationstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkitanimationstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkitanimationstart,
                    );
                __widl_f_set_onwebkitanimationstart_Window(self_, onwebkitanimationstart)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onwebkittransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onwebkittransitionend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onwebkittransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onwebkittransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onwebkittransitionend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkittransitionend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onwebkittransitionend(&self, onwebkittransitionend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onwebkittransitionend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onwebkittransitionend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onwebkittransitionend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onwebkittransitionend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onwebkittransitionend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onwebkittransitionend,
                    );
                __widl_f_set_onwebkittransitionend_Window(self_, onwebkittransitionend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "U2f", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_u2f_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <U2f as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "U2f", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `u2f` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/u2f)\n\n*This API requires the following crate features to be activated: `U2f`, `Window`*"]
    #[allow(clippy::all)]
    pub fn u2f(&self) -> Result<U2f, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "U2f", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_u2f_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <U2f as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_u2f_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <U2f as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_u2f_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<U2f as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onerror(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onerror_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onerror(&self, onerror: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onerror: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onerror: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onerror);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onerror =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onerror,
                    );
                __widl_f_set_onerror_Window(self_, onerror)
            };
            ()
        }
    }
}
#[cfg(all(feature = "SpeechSynthesis", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_speech_synthesis_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <SpeechSynthesis as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "SpeechSynthesis", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `speechSynthesis` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis)\n\n*This API requires the following crate features to be activated: `SpeechSynthesis`, `Window`*"]
    #[allow(clippy::all)]
    pub fn speech_synthesis(&self) -> Result<SpeechSynthesis, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "SpeechSynthesis", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_speech_synthesis_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <SpeechSynthesis as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_speech_synthesis_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <SpeechSynthesis as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_speech_synthesis_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<SpeechSynthesis as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchstart(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchstart_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchstart_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchstart(&self, ontouchstart: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchstart_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchstart : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchstart_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchstart: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchstart);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchstart =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchstart,
                    );
                __widl_f_set_ontouchstart_Window(self_, ontouchstart)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchend(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchend_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchend_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchend(&self, ontouchend: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchend_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchend : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchend_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchend: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchend);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchend =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchend,
                    );
                __widl_f_set_ontouchend_Window(self_, ontouchend)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchmove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchmove(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchmove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchmove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchmove_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchmove_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchmove(&self, ontouchmove: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchmove_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchmove : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchmove_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchmove: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchmove);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchmove =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchmove,
                    );
                __widl_f_set_ontouchmove_Window(self_, ontouchmove)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ontouchcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ontouchcancel(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ontouchcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ontouchcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ontouchcancel_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchcancel_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ontouchcancel(&self, ontouchcancel: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ontouchcancel_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ontouchcancel : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ontouchcancel_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ontouchcancel: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ontouchcancel);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ontouchcancel =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ontouchcancel,
                    );
                __widl_f_set_ontouchcancel_Window(self_, ontouchcancel)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onafterprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onafterprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onafterprint(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onafterprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onafterprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onafterprint_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onafterprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onafterprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onafterprint(&self, onafterprint: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onafterprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onafterprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onafterprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onafterprint: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onafterprint);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onafterprint =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onafterprint,
                    );
                __widl_f_set_onafterprint_Window(self_, onafterprint)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onbeforeprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onbeforeprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onbeforeprint(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onbeforeprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onbeforeprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onbeforeprint_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeprint_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onbeforeprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onbeforeprint(&self, onbeforeprint: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onbeforeprint_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onbeforeprint : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onbeforeprint_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onbeforeprint: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onbeforeprint);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onbeforeprint =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onbeforeprint,
                    );
                __widl_f_set_onbeforeprint_Window(self_, onbeforeprint)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onbeforeunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onbeforeunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onbeforeunload(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onbeforeunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onbeforeunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onbeforeunload_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onbeforeunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onbeforeunload(&self, onbeforeunload: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onbeforeunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onbeforeunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onbeforeunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onbeforeunload : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onbeforeunload);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onbeforeunload =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onbeforeunload,
                    );
                __widl_f_set_onbeforeunload_Window(self_, onbeforeunload)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onhashchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onhashchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onhashchange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onhashchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onhashchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onhashchange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onhashchange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onhashchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onhashchange(&self, onhashchange: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onhashchange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onhashchange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onhashchange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onhashchange: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onhashchange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onhashchange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onhashchange,
                    );
                __widl_f_set_onhashchange_Window(self_, onhashchange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onlanguagechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onlanguagechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onlanguagechange(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onlanguagechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onlanguagechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onlanguagechange_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onlanguagechange_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onlanguagechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onlanguagechange(&self, onlanguagechange: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onlanguagechange_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onlanguagechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onlanguagechange_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onlanguagechange : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onlanguagechange);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onlanguagechange =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onlanguagechange,
                    );
                __widl_f_set_onlanguagechange_Window(self_, onlanguagechange)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmessage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmessage(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmessage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmessage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmessage_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmessage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmessage(&self, onmessage: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmessage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmessage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmessage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmessage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onmessage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmessage =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmessage,
                    );
                __widl_f_set_onmessage_Window(self_, onmessage)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onmessageerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onmessageerror(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onmessageerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onmessageerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onmessageerror_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onmessageerror_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onmessageerror(&self, onmessageerror: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onmessageerror_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onmessageerror_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
        ) -> () {
            drop(self_);
            drop(onmessageerror);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onmessageerror =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onmessageerror,
                    );
                __widl_f_set_onmessageerror_Window(self_, onmessageerror)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onoffline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onoffline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onoffline(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onoffline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onoffline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onoffline_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onoffline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onoffline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onoffline(&self, onoffline: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onoffline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onoffline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onoffline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onoffline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onoffline);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onoffline =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onoffline,
                    );
                __widl_f_set_onoffline_Window(self_, onoffline)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_ononline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ononline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn ononline(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_ononline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_ononline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_ononline_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_ononline_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `ononline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_ononline(&self, ononline: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_ononline_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                ononline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_ononline_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ononline: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(ononline);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let ononline =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        ononline,
                    );
                __widl_f_set_ononline_Window(self_, ononline)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpagehide_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpagehide` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpagehide(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpagehide_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpagehide_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpagehide_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpagehide_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpagehide` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpagehide(&self, onpagehide: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpagehide_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpagehide : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpagehide_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpagehide: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpagehide);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpagehide =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpagehide,
                    );
                __widl_f_set_onpagehide_Window(self_, onpagehide)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpageshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpageshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpageshow(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpageshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpageshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpageshow_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpageshow_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpageshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpageshow(&self, onpageshow: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpageshow_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpageshow : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpageshow_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpageshow: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpageshow);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpageshow =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpageshow,
                    );
                __widl_f_set_onpageshow_Window(self_, onpageshow)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onpopstate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpopstate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onpopstate(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onpopstate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onpopstate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onpopstate_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onpopstate_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onpopstate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onpopstate(&self, onpopstate: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onpopstate_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onpopstate : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onpopstate_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onpopstate: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onpopstate);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onpopstate =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onpopstate,
                    );
                __widl_f_set_onpopstate_Window(self_, onpopstate)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onstorage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onstorage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onstorage(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onstorage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onstorage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onstorage_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onstorage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onstorage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onstorage(&self, onstorage: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onstorage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onstorage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onstorage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onstorage: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onstorage);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onstorage =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onstorage,
                    );
                __widl_f_set_onstorage_Window(self_, onstorage)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_onunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<::js_sys::Function> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn onunload(&self) -> Option<::js_sys::Function> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_onunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_onunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_onunload_Window(self_)
            };
            <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_onunload_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <Option<&::js_sys::Function> as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `onunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_onunload(&self, onunload: Option<&::js_sys::Function>) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_onunload_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                onunload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_onunload_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            onunload: <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(onunload);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let onunload =
                    <Option<&::js_sys::Function> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        onunload,
                    );
                __widl_f_set_onunload_Window(self_, onunload)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Storage", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_local_storage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Storage> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Storage", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `localStorage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)\n\n*This API requires the following crate features to be activated: `Storage`, `Window`*"]
    #[allow(clippy::all)]
    pub fn local_storage(&self) -> Result<Option<Storage>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Storage", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_local_storage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Storage> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_local_storage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Storage> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_local_storage_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Storage> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_atob_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `atob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn atob(&self, atob: &str) -> Result<String, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_atob_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                atob: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_atob_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            atob: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(atob);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let atob = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(atob);
                __widl_f_atob_Window(self_, atob)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_btoa_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `btoa()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn btoa(&self, btoa: &str) -> Result<String, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_btoa_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                btoa: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_btoa_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            btoa: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(btoa);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let btoa = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(btoa);
                __widl_f_btoa_Window(self_, btoa)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                _ret,
            ))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_interval(&self) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_interval_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_interval_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_clear_interval_Window(self_)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_with_handle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_interval_with_handle(&self, handle: i32) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_interval_with_handle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_interval_with_handle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_clear_interval_with_handle_Window(self_, handle)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_timeout(&self) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_timeout_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_timeout_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_clear_timeout_Window(self_)
            };
            ()
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_with_handle_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <() as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn clear_timeout_with_handle(&self, handle: i32) {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_clear_timeout_with_handle_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> ();
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_clear_timeout_with_handle_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> () {
            drop(self_);
            drop(handle);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                __widl_f_clear_timeout_with_handle_Window(self_, handle)
            };
            ()
        }
    }
}
#[cfg(all(feature = "HtmlImageElement", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_image_element_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlImageElement as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "HtmlImageElement", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_image_element(
        &self,
        a_image: &HtmlImageElement,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "HtmlImageElement", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_image_element_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlImageElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_image_element_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlImageElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlImageElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_html_image_element_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "HtmlVideoElement", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_video_element_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlVideoElement as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "HtmlVideoElement", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlVideoElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_video_element(
        &self,
        a_image: &HtmlVideoElement,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "HtmlVideoElement", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_video_element_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlVideoElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_video_element_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlVideoElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlVideoElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_html_video_element_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "HtmlCanvasElement", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_canvas_element_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "HtmlCanvasElement", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_canvas_element(
        &self,
        a_image: &HtmlCanvasElement,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "HtmlCanvasElement", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_canvas_element_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_canvas_element_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_html_canvas_element_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Blob", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_blob_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&Blob as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Blob", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Blob`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_blob(
        &self,
        a_image: &Blob,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Blob", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_blob_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&Blob as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_blob_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&Blob as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&Blob as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_blob_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "ImageData", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_image_data_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&ImageData as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "ImageData", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `ImageData`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_image_data(
        &self,
        a_image: &ImageData,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "ImageData", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_image_data_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&ImageData as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_image_data_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&ImageData as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&ImageData as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_image_data_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "CanvasRenderingContext2d", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&CanvasRenderingContext2d as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "CanvasRenderingContext2d", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_canvas_rendering_context_2d(
        &self,
        a_image: &CanvasRenderingContext2d,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "CanvasRenderingContext2d", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&CanvasRenderingContext2d as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&CanvasRenderingContext2d as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&CanvasRenderingContext2d as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        a_image,
                    );
                __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "ImageBitmap", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_image_bitmap_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&ImageBitmap as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "ImageBitmap", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `ImageBitmap`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_image_bitmap(
        &self,
        a_image: &ImageBitmap,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "ImageBitmap", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_image_bitmap_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&ImageBitmap as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_image_bitmap_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&ImageBitmap as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&ImageBitmap as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_image_bitmap_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_buffer_source(
        &self,
        a_image: &::js_sys::Object,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_buffer_source_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_buffer_source_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_buffer_source_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&mut [u8] as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_u8_array(
        &self,
        a_image: &mut [u8],
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_u8_array_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_u8_array_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                __widl_f_create_image_bitmap_with_u8_array_Window(self_, a_image)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "HtmlImageElement", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlImageElement as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "HtmlImageElement", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &HtmlImageElement,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "HtmlImageElement", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlImageElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlImageElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlImageElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "HtmlVideoElement", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_video_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlVideoElement as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "HtmlVideoElement", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlVideoElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_video_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &HtmlVideoElement,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "HtmlVideoElement", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_video_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlVideoElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_video_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlVideoElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlVideoElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_html_video_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "HtmlCanvasElement", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&HtmlCanvasElement as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "HtmlCanvasElement", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &HtmlCanvasElement,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "HtmlCanvasElement", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Blob", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_blob_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&Blob as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Blob", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Blob`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_blob_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &Blob,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Blob", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_blob_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&Blob as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_blob_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&Blob as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&Blob as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_blob_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                    self_, a_image, a_sx, a_sy, a_sw, a_sh,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "ImageData", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&ImageData as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "ImageData", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `ImageData`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &ImageData,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "ImageData", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&ImageData as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&ImageData as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&ImageData as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "CanvasRenderingContext2d", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&CanvasRenderingContext2d as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "CanvasRenderingContext2d", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &CanvasRenderingContext2d,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "CanvasRenderingContext2d", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&CanvasRenderingContext2d as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&CanvasRenderingContext2d as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&CanvasRenderingContext2d as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        a_image,
                    );
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "ImageBitmap", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_image_bitmap_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&ImageBitmap as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "ImageBitmap", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `ImageBitmap`, `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_image_bitmap_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &ImageBitmap,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "ImageBitmap", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_image_bitmap_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&ImageBitmap as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_image_bitmap_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&ImageBitmap as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&ImageBitmap as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_image_bitmap_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Object as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &::js_sys::Object,
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image =
                    <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&mut [u8] as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
        &self,
        a_image: &mut [u8],
        a_sx: i32,
        a_sy: i32,
        a_sw: i32,
        a_sh: i32,
    ) -> Result<::js_sys::Promise, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(a_image);
            drop(a_sx);
            drop(a_sy);
            drop(a_sw);
            drop(a_sh);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let a_image = <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Request", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fetch_with_request_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&Request as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Request", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `Request`, `Window`*"]
    #[allow(clippy::all)]
    pub fn fetch_with_request(&self, input: &Request) -> ::js_sys::Promise {
        #[cfg(all(feature = "Request", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fetch_with_request_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                input: <&Request as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fetch_with_request_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            input: <&Request as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(input);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let input = <&Request as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                __widl_f_fetch_with_request_Window(self_, input)
            };
            <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fetch_with_str_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn fetch_with_str(&self, input: &str) -> ::js_sys::Promise {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fetch_with_str_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                input: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fetch_with_str_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            input: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(input);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let input = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                __widl_f_fetch_with_str_Window(self_, input)
            };
            <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Request", feature = "RequestInit", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fetch_with_request_and_init_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&Request as WasmDescribe>::describe();
    <&RequestInit as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Request", feature = "RequestInit", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `Request`, `RequestInit`, `Window`*"]
    #[allow(clippy::all)]
    pub fn fetch_with_request_and_init(
        &self,
        input: &Request,
        init: &RequestInit,
    ) -> ::js_sys::Promise {
        #[cfg(all(feature = "Request", feature = "RequestInit", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fetch_with_request_and_init_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                input: <&Request as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                init: <&RequestInit as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fetch_with_request_and_init_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            input: <&Request as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            init: <&RequestInit as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(input);
            drop(init);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let input = <&Request as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                let init = <&RequestInit as wasm_bindgen::convert::IntoWasmAbi>::into_abi(init);
                __widl_f_fetch_with_request_and_init_Window(self_, input, init)
            };
            <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "RequestInit", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_fetch_with_str_and_init_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <&RequestInit as WasmDescribe>::describe();
    <::js_sys::Promise as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "RequestInit", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `RequestInit`, `Window`*"]
    #[allow(clippy::all)]
    pub fn fetch_with_str_and_init(&self, input: &str, init: &RequestInit) -> ::js_sys::Promise {
        #[cfg(all(feature = "RequestInit", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_fetch_with_str_and_init_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                input: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                init: <&RequestInit as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_fetch_with_str_and_init_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            input: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            init: <&RequestInit as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(input);
            drop(init);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let input = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                let init = <&RequestInit as wasm_bindgen::convert::IntoWasmAbi>::into_abi(init);
                __widl_f_fetch_with_str_and_init_Window(self_, input, init)
            };
            <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback(
        &self,
        handler: &::js_sys::Function,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_interval_with_callback_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(arguments);
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window(
                    self_, handler, timeout, arguments,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_0(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_1(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_2(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_3(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_4(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_5(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_6(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_callback_and_timeout_and_arguments_7(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
        arguments_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            drop(arguments_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                let arguments_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_7,
                    );
                __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                    arguments_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str(&self, handler: &str) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_interval_with_str_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused(
        &self,
        handler: &str,
        timeout: i32,
        unused: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(unused);
                __widl_f_set_interval_with_str_and_timeout_and_unused_Window(
                    self_, handler, timeout, unused,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_0(
        &self,
        handler: &str,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_1(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window(
                    self_, handler, timeout, unused_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_2(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window(
                    self_, handler, timeout, unused_1, unused_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_3(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_4(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_5(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_6(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_interval_with_str_and_timeout_and_unused_7(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
        unused_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            drop(unused_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                let unused_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_7,
                    );
                __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6, unused_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback(
        &self,
        handler: &::js_sys::Function,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_timeout_with_callback_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(arguments);
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window(
                    self_, handler, timeout, arguments,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_0(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_1(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_2(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_3(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_4(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_5(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_6(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&::js_sys::Function as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_callback_and_timeout_and_arguments_7(
        &self,
        handler: &::js_sys::Function,
        timeout: i32,
        arguments_1: &::wasm_bindgen::JsValue,
        arguments_2: &::wasm_bindgen::JsValue,
        arguments_3: &::wasm_bindgen::JsValue,
        arguments_4: &::wasm_bindgen::JsValue,
        arguments_5: &::wasm_bindgen::JsValue,
        arguments_6: &::wasm_bindgen::JsValue,
        arguments_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            arguments_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(arguments_1);
            drop(arguments_2);
            drop(arguments_3);
            drop(arguments_4);
            drop(arguments_5);
            drop(arguments_6);
            drop(arguments_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler =
                    <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let arguments_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_1,
                    );
                let arguments_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_2,
                    );
                let arguments_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_3,
                    );
                let arguments_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_4,
                    );
                let arguments_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_5,
                    );
                let arguments_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_6,
                    );
                let arguments_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        arguments_7,
                    );
                __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window(
                    self_,
                    handler,
                    timeout,
                    arguments_1,
                    arguments_2,
                    arguments_3,
                    arguments_4,
                    arguments_5,
                    arguments_6,
                    arguments_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(2u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str(&self, handler: &str) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                __widl_f_set_timeout_with_str_Window(self_, handler)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_Window()
{
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::js_sys::Array as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused(
        &self,
        handler: &str,
        timeout: i32,
        unused: &::js_sys::Array,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused =
                    <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(unused);
                __widl_f_set_timeout_with_str_and_timeout_and_unused_Window(
                    self_, handler, timeout, unused,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(3u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_0(
        &self,
        handler: &str,
        timeout: i32,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window(
                    self_, handler, timeout,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(4u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_1(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window(
                    self_, handler, timeout, unused_1,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(5u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_2(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window(
                    self_, handler, timeout, unused_1, unused_2,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(6u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_3(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(7u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_4(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(8u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_5(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(9u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_6(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
) {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(10u32);
    <&Window as WasmDescribe>::describe();
    <&str as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
    <i32 as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn set_timeout_with_str_and_timeout_and_unused_7(
        &self,
        handler: &str,
        timeout: i32,
        unused_1: &::wasm_bindgen::JsValue,
        unused_2: &::wasm_bindgen::JsValue,
        unused_3: &::wasm_bindgen::JsValue,
        unused_4: &::wasm_bindgen::JsValue,
        unused_5: &::wasm_bindgen::JsValue,
        unused_6: &::wasm_bindgen::JsValue,
        unused_7: &::wasm_bindgen::JsValue,
    ) -> Result<i32, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_1: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_2: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_3: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_4: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_5: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_6: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            unused_7: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            drop(handler);
            drop(timeout);
            drop(unused_1);
            drop(unused_2);
            drop(unused_3);
            drop(unused_4);
            drop(unused_5);
            drop(unused_6);
            drop(unused_7);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                let handler = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                let timeout = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                let unused_1 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_1,
                    );
                let unused_2 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_2,
                    );
                let unused_3 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_3,
                    );
                let unused_4 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_4,
                    );
                let unused_5 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_5,
                    );
                let unused_6 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_6,
                    );
                let unused_7 =
                    <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                        unused_7,
                    );
                __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window(
                    self_, handler, timeout, unused_1, unused_2, unused_3, unused_4, unused_5,
                    unused_6, unused_7,
                )
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_origin_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <String as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `origin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn origin(&self) -> String {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_origin_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_origin_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_origin_Window(self_)
            };
            <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_is_secure_context_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <bool as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `isSecureContext` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)\n\n*This API requires the following crate features to be activated: `Window`*"]
    #[allow(clippy::all)]
    pub fn is_secure_context(&self) -> bool {
        #[cfg(all(feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_is_secure_context_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_is_secure_context_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_is_secure_context_Window(self_)
            };
            <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
        }
    }
}
#[cfg(all(feature = "IdbFactory", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_indexed_db_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<IdbFactory> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "IdbFactory", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `indexedDB` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/indexedDB)\n\n*This API requires the following crate features to be activated: `IdbFactory`, `Window`*"]
    #[allow(clippy::all)]
    pub fn indexed_db(&self) -> Result<Option<IdbFactory>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "IdbFactory", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_indexed_db_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<IdbFactory> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_indexed_db_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<IdbFactory> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_indexed_db_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<IdbFactory> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "CacheStorage", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_caches_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <CacheStorage as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "CacheStorage", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `caches` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/caches)\n\n*This API requires the following crate features to be activated: `CacheStorage`, `Window`*"]
    #[allow(clippy::all)]
    pub fn caches(&self) -> Result<CacheStorage, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "CacheStorage", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_caches_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <CacheStorage as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_caches_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <CacheStorage as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_caches_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<CacheStorage as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[cfg(all(feature = "Storage", feature = "Window",))]
#[no_mangle]
#[allow(non_snake_case)]
#[doc(hidden)]
#[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
#[allow(clippy::all)]
pub extern "C" fn __wbindgen_describe___widl_f_session_storage_Window() {
    use wasm_bindgen::describe::*;
    wasm_bindgen::__rt::link_mem_intrinsics();
    inform(FUNCTION);
    inform(0);
    inform(1u32);
    <&Window as WasmDescribe>::describe();
    <Option<Storage> as WasmDescribe>::describe();
}
impl Window {
    #[cfg(all(feature = "Storage", feature = "Window",))]
    #[allow(bad_style)]
    #[doc = "The `sessionStorage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)\n\n*This API requires the following crate features to be activated: `Storage`, `Window`*"]
    #[allow(clippy::all)]
    pub fn session_storage(&self) -> Result<Option<Storage>, ::wasm_bindgen::JsValue> {
        #[cfg(all(feature = "Storage", feature = "Window",))]
        #[link(wasm_import_module = "__wbindgen_placeholder__")]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        extern "C" {
            fn __widl_f_session_storage_Window(
                self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
            ) -> <Option<Storage> as wasm_bindgen::convert::FromWasmAbi>::Abi;
        }
        #[cfg(not(all(target_arch = "wasm32", not(target_os = "emscripten"))))]
        unsafe fn __widl_f_session_storage_Window(
            self_: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
        ) -> <Option<Storage> as wasm_bindgen::convert::FromWasmAbi>::Abi {
            drop(self_);
            panic!(
                "cannot call wasm-bindgen imported functions on \
                            non-wasm targets"
            );
        }
        unsafe {
            let _ret = {
                let self_ = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                __widl_f_session_storage_Window(self_)
            };
            wasm_bindgen::__rt::take_last_exception()?;
            Ok(<Option<Storage> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
        }
    }
}
#[allow(non_upper_case_globals)]
#[cfg(target_arch = "wasm32")]
#[link_section = "__wasm_bindgen_unstable"]
#[doc(hidden)]
#[allow(clippy::all)]
pub static __WASM_BINDGEN_GENERATED_1226b24afc1f706d: [u8; 35375usize] = {
    static _INCLUDED_FILES: &[&str] = &[];
    * b":\0\0\0{\"schema_version\":\"0.2.58\",\"version\":\"0.2.58 (0f3c53b5a)\"}\xED\x89\0\0\0\0\x81\x03\0\0\x02\x06Window\x18__widl_instanceof_Window\0\0\0\0\x15__widl_f_alert_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05alert\0\0\0\"__widl_f_alert_with_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x05alert\0\0\0\x14__widl_f_blur_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04blur\0\0\0&__widl_f_cancel_animation_frame_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x14cancelAnimationFrame\0\0\0$__widl_f_cancel_idle_callback_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x12cancelIdleCallback\0\0\0\x1E__widl_f_capture_events_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rcaptureEvents\0\0\0\x15__widl_f_close_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05close\0\0\0\x17__widl_f_confirm_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x07confirm\0\0\0$__widl_f_confirm_with_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x07confirm\0\0\0\x15__widl_f_focus_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05focus\0\0\0\"__widl_f_get_computed_style_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x03elt\x10getComputedStyle\0\0\02__widl_f_get_computed_style_with_pseudo_elt_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x03elt\npseudo_elt\x10getComputedStyle\0\0\0\x1D__widl_f_get_selection_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x0CgetSelection\0\0\0\x1B__widl_f_match_media_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x05query\nmatchMedia\0\0\0\x17__widl_f_move_by_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06moveBy\0\0\0\x17__widl_f_move_to_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06moveTo\0\0\0\x14__widl_f_open_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04open\0\0\0\x1D__widl_f_open_with_url_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x03url\x04open\0\0\0(__widl_f_open_with_url_and_target_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x03url\x06target\x04open\0\0\05__widl_f_open_with_url_and_target_and_features_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x03url\x06target\x08features\x04open\0\0\0\x1C__widl_f_post_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07message\rtarget_origin\x0BpostMessage\0\0\0*__widl_f_post_message_with_transfer_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07message\rtarget_origin\x08transfer\x0BpostMessage\0\0\0\x15__widl_f_print_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x05print\0\0\0\x16__widl_f_prompt_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x06prompt\0\0\0#__widl_f_prompt_with_message_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07message\x06prompt\0\0\0/__widl_f_prompt_with_message_and_default_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07message\x07default\x06prompt\0\0\0\x1E__widl_f_release_events_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rreleaseEvents\0\0\0'__widl_f_request_animation_frame_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x08callback\x15requestAnimationFrame\0\0\0%__widl_f_request_idle_callback_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x08callback\x13requestIdleCallback\0\0\02__widl_f_request_idle_callback_with_options_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x08callback\x07options\x13requestIdleCallback\0\0\0\x19__widl_f_resize_by_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08resizeBy\0\0\0\x19__widl_f_resize_to_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08resizeTo\0\0\0#__widl_f_scroll_with_x_and_y_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x06scroll\0\0\0\x16__widl_f_scroll_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x06scroll\0\0\0-__widl_f_scroll_with_scroll_to_options_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07options\x06scroll\0\0\0&__widl_f_scroll_by_with_x_and_y_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollBy\0\0\0\x19__widl_f_scroll_by_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x08scrollBy\0\0\00__widl_f_scroll_by_with_scroll_to_options_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07options\x08scrollBy\0\0\0&__widl_f_scroll_to_with_x_and_y_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x01x\x01y\x08scrollTo\0\0\0\x19__widl_f_scroll_to_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x08scrollTo\0\0\00__widl_f_scroll_to_with_scroll_to_options_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07options\x08scrollTo\0\0\0\x14__widl_f_stop_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x04stop\0\0\0\x13__widl_f_get_Window\0\0\0\x01\x06Window\x01\0\x03\x01\x02\x05self_\x04name\x03get\0\0\0\x16__widl_f_window_Window\0\0\0\x01\x06Window\x01\0\x01\x06window\x01\x01\x05self_\x06window\0\0\0\x14__widl_f_self_Window\0\0\0\x01\x06Window\x01\0\x01\x04self\x01\x01\x05self_\x04self\0\0\0\x18__widl_f_document_Window\0\0\0\x01\x06Window\x01\0\x01\x08document\x01\x01\x05self_\x08document\0\0\0\x14__widl_f_name_Window\x01\0\0\x01\x06Window\x01\0\x01\x04name\x01\x01\x05self_\x04name\0\0\0\x18__widl_f_set_name_Window\x01\0\0\x01\x06Window\x01\0\x02\x04name\x01\x02\x05self_\x04name\x04name\0\0\0\x18__widl_f_location_Window\0\0\0\x01\x06Window\x01\0\x01\x08location\x01\x01\x05self_\x08location\0\0\0\x17__widl_f_history_Window\x01\0\0\x01\x06Window\x01\0\x01\x07history\x01\x01\x05self_\x07history\0\0\0\x1F__widl_f_custom_elements_Window\0\0\0\x01\x06Window\x01\0\x01\x0EcustomElements\x01\x01\x05self_\x0EcustomElements\0\0\0\x1B__widl_f_locationbar_Window\x01\0\0\x01\x06Window\x01\0\x01\x0Blocationbar\x01\x01\x05self_\x0Blocationbar\0\0\0\x17__widl_f_menubar_Window\x01\0\0\x01\x06Window\x01\0\x01\x07menubar\x01\x01\x05self_\x07menubar\0\0\0\x1B__widl_f_personalbar_Window\x01\0\0\x01\x06Window\x01\0\x01\x0Bpersonalbar\x01\x01\x05self_\x0Bpersonalbar\0\0\0\x1A__widl_f_scrollbars_Window\x01\0\0\x01\x06Window\x01\0\x01\nscrollbars\x01\x01\x05self_\nscrollbars\0\0\0\x19__widl_f_statusbar_Window\x01\0\0\x01\x06Window\x01\0\x01\tstatusbar\x01\x01\x05self_\tstatusbar\0\0\0\x17__widl_f_toolbar_Window\x01\0\0\x01\x06Window\x01\0\x01\x07toolbar\x01\x01\x05self_\x07toolbar\0\0\0\x16__widl_f_status_Window\x01\0\0\x01\x06Window\x01\0\x01\x06status\x01\x01\x05self_\x06status\0\0\0\x1A__widl_f_set_status_Window\x01\0\0\x01\x06Window\x01\0\x02\x06status\x01\x02\x05self_\x06status\x06status\0\0\0\x16__widl_f_closed_Window\x01\0\0\x01\x06Window\x01\0\x01\x06closed\x01\x01\x05self_\x06closed\0\0\0\x15__widl_f_event_Window\0\0\0\x01\x06Window\x01\0\x01\x05event\x01\x01\x05self_\x05event\0\0\0\x16__widl_f_frames_Window\x01\0\0\x01\x06Window\x01\0\x01\x06frames\x01\x01\x05self_\x06frames\0\0\0\x16__widl_f_length_Window\0\0\0\x01\x06Window\x01\0\x01\x06length\x01\x01\x05self_\x06length\0\0\0\x13__widl_f_top_Window\x01\0\0\x01\x06Window\x01\0\x01\x03top\x01\x01\x05self_\x03top\0\0\0\x16__widl_f_opener_Window\x01\0\0\x01\x06Window\x01\0\x01\x06opener\x01\x01\x05self_\x06opener\0\0\0\x1A__widl_f_set_opener_Window\x01\0\0\x01\x06Window\x01\0\x02\x06opener\x01\x02\x05self_\x06opener\x06opener\0\0\0\x16__widl_f_parent_Window\x01\0\0\x01\x06Window\x01\0\x01\x06parent\x01\x01\x05self_\x06parent\0\0\0\x1D__widl_f_frame_element_Window\x01\0\0\x01\x06Window\x01\0\x01\x0CframeElement\x01\x01\x05self_\x0CframeElement\0\0\0\x19__widl_f_navigator_Window\0\0\0\x01\x06Window\x01\0\x01\tnavigator\x01\x01\x05self_\tnavigator\0\0\0\x18__widl_f_external_Window\x01\0\0\x01\x06Window\x01\0\x01\x08external\x01\x01\x05self_\x08external\0\0\0\x1E__widl_f_onappinstalled_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonappinstalled\x01\x01\x05self_\x0Eonappinstalled\0\0\0\"__widl_f_set_onappinstalled_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonappinstalled\x01\x02\x05self_\x0Eonappinstalled\x0Eonappinstalled\0\0\0\x16__widl_f_screen_Window\x01\0\0\x01\x06Window\x01\0\x01\x06screen\x01\x01\x05self_\x06screen\0\0\0\x1B__widl_f_inner_width_Window\x01\0\0\x01\x06Window\x01\0\x01\ninnerWidth\x01\x01\x05self_\ninnerWidth\0\0\0\x1F__widl_f_set_inner_width_Window\x01\0\0\x01\x06Window\x01\0\x02\ninnerWidth\x01\x02\x05self_\x0Binner_width\ninnerWidth\0\0\0\x1C__widl_f_inner_height_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BinnerHeight\x01\x01\x05self_\x0BinnerHeight\0\0\0 __widl_f_set_inner_height_Window\x01\0\0\x01\x06Window\x01\0\x02\x0BinnerHeight\x01\x02\x05self_\x0Cinner_height\x0BinnerHeight\0\0\0\x18__widl_f_scroll_x_Window\x01\0\0\x01\x06Window\x01\0\x01\x07scrollX\x01\x01\x05self_\x07scrollX\0\0\0\x1D__widl_f_page_x_offset_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BpageXOffset\x01\x01\x05self_\x0BpageXOffset\0\0\0\x18__widl_f_scroll_y_Window\x01\0\0\x01\x06Window\x01\0\x01\x07scrollY\x01\x01\x05self_\x07scrollY\0\0\0\x1D__widl_f_page_y_offset_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BpageYOffset\x01\x01\x05self_\x0BpageYOffset\0\0\0\x18__widl_f_screen_x_Window\x01\0\0\x01\x06Window\x01\0\x01\x07screenX\x01\x01\x05self_\x07screenX\0\0\0\x1C__widl_f_set_screen_x_Window\x01\0\0\x01\x06Window\x01\0\x02\x07screenX\x01\x02\x05self_\x08screen_x\x07screenX\0\0\0\x18__widl_f_screen_y_Window\x01\0\0\x01\x06Window\x01\0\x01\x07screenY\x01\x01\x05self_\x07screenY\0\0\0\x1C__widl_f_set_screen_y_Window\x01\0\0\x01\x06Window\x01\0\x02\x07screenY\x01\x02\x05self_\x08screen_y\x07screenY\0\0\0\x1B__widl_f_outer_width_Window\x01\0\0\x01\x06Window\x01\0\x01\nouterWidth\x01\x01\x05self_\nouterWidth\0\0\0\x1F__widl_f_set_outer_width_Window\x01\0\0\x01\x06Window\x01\0\x02\nouterWidth\x01\x02\x05self_\x0Bouter_width\nouterWidth\0\0\0\x1C__widl_f_outer_height_Window\x01\0\0\x01\x06Window\x01\0\x01\x0BouterHeight\x01\x01\x05self_\x0BouterHeight\0\0\0 __widl_f_set_outer_height_Window\x01\0\0\x01\x06Window\x01\0\x02\x0BouterHeight\x01\x02\x05self_\x0Couter_height\x0BouterHeight\0\0\0\"__widl_f_device_pixel_ratio_Window\0\0\0\x01\x06Window\x01\0\x01\x10devicePixelRatio\x01\x01\x05self_\x10devicePixelRatio\0\0\0\x1B__widl_f_performance_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bperformance\x01\x01\x05self_\x0Bperformance\0\0\0\x1B__widl_f_orientation_Window\0\0\0\x01\x06Window\x01\0\x01\x0Borientation\x01\x01\x05self_\x0Borientation\0\0\0#__widl_f_onorientationchange_Window\0\0\0\x01\x06Window\x01\0\x01\x13onorientationchange\x01\x01\x05self_\x13onorientationchange\0\0\0'__widl_f_set_onorientationchange_Window\0\0\0\x01\x06Window\x01\0\x02\x13onorientationchange\x01\x02\x05self_\x13onorientationchange\x13onorientationchange\0\0\0\"__widl_f_onvrdisplayconnect_Window\0\0\0\x01\x06Window\x01\0\x01\x12onvrdisplayconnect\x01\x01\x05self_\x12onvrdisplayconnect\0\0\0&__widl_f_set_onvrdisplayconnect_Window\0\0\0\x01\x06Window\x01\0\x02\x12onvrdisplayconnect\x01\x02\x05self_\x12onvrdisplayconnect\x12onvrdisplayconnect\0\0\0%__widl_f_onvrdisplaydisconnect_Window\0\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydisconnect\x01\x01\x05self_\x15onvrdisplaydisconnect\0\0\0)__widl_f_set_onvrdisplaydisconnect_Window\0\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydisconnect\x01\x02\x05self_\x15onvrdisplaydisconnect\x15onvrdisplaydisconnect\0\0\0#__widl_f_onvrdisplayactivate_Window\0\0\0\x01\x06Window\x01\0\x01\x13onvrdisplayactivate\x01\x01\x05self_\x13onvrdisplayactivate\0\0\0'__widl_f_set_onvrdisplayactivate_Window\0\0\0\x01\x06Window\x01\0\x02\x13onvrdisplayactivate\x01\x02\x05self_\x13onvrdisplayactivate\x13onvrdisplayactivate\0\0\0%__widl_f_onvrdisplaydeactivate_Window\0\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydeactivate\x01\x01\x05self_\x15onvrdisplaydeactivate\0\0\0)__widl_f_set_onvrdisplaydeactivate_Window\0\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydeactivate\x01\x02\x05self_\x15onvrdisplaydeactivate\x15onvrdisplaydeactivate\0\0\0(__widl_f_onvrdisplaypresentchange_Window\0\0\0\x01\x06Window\x01\0\x01\x18onvrdisplaypresentchange\x01\x01\x05self_\x18onvrdisplaypresentchange\0\0\0,__widl_f_set_onvrdisplaypresentchange_Window\0\0\0\x01\x06Window\x01\0\x02\x18onvrdisplaypresentchange\x01\x02\x05self_\x18onvrdisplaypresentchange\x18onvrdisplaypresentchange\0\0\0\x1D__widl_f_paint_worklet_Window\x01\0\0\x01\x06Window\x01\0\x01\x0CpaintWorklet\x01\x01\x05self_\x0CpaintWorklet\0\0\0\x16__widl_f_crypto_Window\x01\0\0\x01\x06Window\x01\0\x01\x06crypto\x01\x01\x05self_\x06crypto\0\0\0\x17__widl_f_onabort_Window\0\0\0\x01\x06Window\x01\0\x01\x07onabort\x01\x01\x05self_\x07onabort\0\0\0\x1B__widl_f_set_onabort_Window\0\0\0\x01\x06Window\x01\0\x02\x07onabort\x01\x02\x05self_\x07onabort\x07onabort\0\0\0\x16__widl_f_onblur_Window\0\0\0\x01\x06Window\x01\0\x01\x06onblur\x01\x01\x05self_\x06onblur\0\0\0\x1A__widl_f_set_onblur_Window\0\0\0\x01\x06Window\x01\0\x02\x06onblur\x01\x02\x05self_\x06onblur\x06onblur\0\0\0\x17__widl_f_onfocus_Window\0\0\0\x01\x06Window\x01\0\x01\x07onfocus\x01\x01\x05self_\x07onfocus\0\0\0\x1B__widl_f_set_onfocus_Window\0\0\0\x01\x06Window\x01\0\x02\x07onfocus\x01\x02\x05self_\x07onfocus\x07onfocus\0\0\0\x1A__widl_f_onauxclick_Window\0\0\0\x01\x06Window\x01\0\x01\nonauxclick\x01\x01\x05self_\nonauxclick\0\0\0\x1E__widl_f_set_onauxclick_Window\0\0\0\x01\x06Window\x01\0\x02\nonauxclick\x01\x02\x05self_\nonauxclick\nonauxclick\0\0\0\x19__widl_f_oncanplay_Window\0\0\0\x01\x06Window\x01\0\x01\toncanplay\x01\x01\x05self_\toncanplay\0\0\0\x1D__widl_f_set_oncanplay_Window\0\0\0\x01\x06Window\x01\0\x02\toncanplay\x01\x02\x05self_\toncanplay\toncanplay\0\0\0 __widl_f_oncanplaythrough_Window\0\0\0\x01\x06Window\x01\0\x01\x10oncanplaythrough\x01\x01\x05self_\x10oncanplaythrough\0\0\0$__widl_f_set_oncanplaythrough_Window\0\0\0\x01\x06Window\x01\0\x02\x10oncanplaythrough\x01\x02\x05self_\x10oncanplaythrough\x10oncanplaythrough\0\0\0\x18__widl_f_onchange_Window\0\0\0\x01\x06Window\x01\0\x01\x08onchange\x01\x01\x05self_\x08onchange\0\0\0\x1C__widl_f_set_onchange_Window\0\0\0\x01\x06Window\x01\0\x02\x08onchange\x01\x02\x05self_\x08onchange\x08onchange\0\0\0\x17__widl_f_onclick_Window\0\0\0\x01\x06Window\x01\0\x01\x07onclick\x01\x01\x05self_\x07onclick\0\0\0\x1B__widl_f_set_onclick_Window\0\0\0\x01\x06Window\x01\0\x02\x07onclick\x01\x02\x05self_\x07onclick\x07onclick\0\0\0\x17__widl_f_onclose_Window\0\0\0\x01\x06Window\x01\0\x01\x07onclose\x01\x01\x05self_\x07onclose\0\0\0\x1B__widl_f_set_onclose_Window\0\0\0\x01\x06Window\x01\0\x02\x07onclose\x01\x02\x05self_\x07onclose\x07onclose\0\0\0\x1D__widl_f_oncontextmenu_Window\0\0\0\x01\x06Window\x01\0\x01\roncontextmenu\x01\x01\x05self_\roncontextmenu\0\0\0!__widl_f_set_oncontextmenu_Window\0\0\0\x01\x06Window\x01\0\x02\roncontextmenu\x01\x02\x05self_\roncontextmenu\roncontextmenu\0\0\0\x1A__widl_f_ondblclick_Window\0\0\0\x01\x06Window\x01\0\x01\nondblclick\x01\x01\x05self_\nondblclick\0\0\0\x1E__widl_f_set_ondblclick_Window\0\0\0\x01\x06Window\x01\0\x02\nondblclick\x01\x02\x05self_\nondblclick\nondblclick\0\0\0\x16__widl_f_ondrag_Window\0\0\0\x01\x06Window\x01\0\x01\x06ondrag\x01\x01\x05self_\x06ondrag\0\0\0\x1A__widl_f_set_ondrag_Window\0\0\0\x01\x06Window\x01\0\x02\x06ondrag\x01\x02\x05self_\x06ondrag\x06ondrag\0\0\0\x19__widl_f_ondragend_Window\0\0\0\x01\x06Window\x01\0\x01\tondragend\x01\x01\x05self_\tondragend\0\0\0\x1D__widl_f_set_ondragend_Window\0\0\0\x01\x06Window\x01\0\x02\tondragend\x01\x02\x05self_\tondragend\tondragend\0\0\0\x1B__widl_f_ondragenter_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bondragenter\x01\x01\x05self_\x0Bondragenter\0\0\0\x1F__widl_f_set_ondragenter_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bondragenter\x01\x02\x05self_\x0Bondragenter\x0Bondragenter\0\0\0\x1A__widl_f_ondragexit_Window\0\0\0\x01\x06Window\x01\0\x01\nondragexit\x01\x01\x05self_\nondragexit\0\0\0\x1E__widl_f_set_ondragexit_Window\0\0\0\x01\x06Window\x01\0\x02\nondragexit\x01\x02\x05self_\nondragexit\nondragexit\0\0\0\x1B__widl_f_ondragleave_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bondragleave\x01\x01\x05self_\x0Bondragleave\0\0\0\x1F__widl_f_set_ondragleave_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bondragleave\x01\x02\x05self_\x0Bondragleave\x0Bondragleave\0\0\0\x1A__widl_f_ondragover_Window\0\0\0\x01\x06Window\x01\0\x01\nondragover\x01\x01\x05self_\nondragover\0\0\0\x1E__widl_f_set_ondragover_Window\0\0\0\x01\x06Window\x01\0\x02\nondragover\x01\x02\x05self_\nondragover\nondragover\0\0\0\x1B__widl_f_ondragstart_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bondragstart\x01\x01\x05self_\x0Bondragstart\0\0\0\x1F__widl_f_set_ondragstart_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bondragstart\x01\x02\x05self_\x0Bondragstart\x0Bondragstart\0\0\0\x16__widl_f_ondrop_Window\0\0\0\x01\x06Window\x01\0\x01\x06ondrop\x01\x01\x05self_\x06ondrop\0\0\0\x1A__widl_f_set_ondrop_Window\0\0\0\x01\x06Window\x01\0\x02\x06ondrop\x01\x02\x05self_\x06ondrop\x06ondrop\0\0\0 __widl_f_ondurationchange_Window\0\0\0\x01\x06Window\x01\0\x01\x10ondurationchange\x01\x01\x05self_\x10ondurationchange\0\0\0$__widl_f_set_ondurationchange_Window\0\0\0\x01\x06Window\x01\0\x02\x10ondurationchange\x01\x02\x05self_\x10ondurationchange\x10ondurationchange\0\0\0\x19__widl_f_onemptied_Window\0\0\0\x01\x06Window\x01\0\x01\tonemptied\x01\x01\x05self_\tonemptied\0\0\0\x1D__widl_f_set_onemptied_Window\0\0\0\x01\x06Window\x01\0\x02\tonemptied\x01\x02\x05self_\tonemptied\tonemptied\0\0\0\x17__widl_f_onended_Window\0\0\0\x01\x06Window\x01\0\x01\x07onended\x01\x01\x05self_\x07onended\0\0\0\x1B__widl_f_set_onended_Window\0\0\0\x01\x06Window\x01\0\x02\x07onended\x01\x02\x05self_\x07onended\x07onended\0\0\0\x17__widl_f_oninput_Window\0\0\0\x01\x06Window\x01\0\x01\x07oninput\x01\x01\x05self_\x07oninput\0\0\0\x1B__widl_f_set_oninput_Window\0\0\0\x01\x06Window\x01\0\x02\x07oninput\x01\x02\x05self_\x07oninput\x07oninput\0\0\0\x19__widl_f_oninvalid_Window\0\0\0\x01\x06Window\x01\0\x01\toninvalid\x01\x01\x05self_\toninvalid\0\0\0\x1D__widl_f_set_oninvalid_Window\0\0\0\x01\x06Window\x01\0\x02\toninvalid\x01\x02\x05self_\toninvalid\toninvalid\0\0\0\x19__widl_f_onkeydown_Window\0\0\0\x01\x06Window\x01\0\x01\tonkeydown\x01\x01\x05self_\tonkeydown\0\0\0\x1D__widl_f_set_onkeydown_Window\0\0\0\x01\x06Window\x01\0\x02\tonkeydown\x01\x02\x05self_\tonkeydown\tonkeydown\0\0\0\x1A__widl_f_onkeypress_Window\0\0\0\x01\x06Window\x01\0\x01\nonkeypress\x01\x01\x05self_\nonkeypress\0\0\0\x1E__widl_f_set_onkeypress_Window\0\0\0\x01\x06Window\x01\0\x02\nonkeypress\x01\x02\x05self_\nonkeypress\nonkeypress\0\0\0\x17__widl_f_onkeyup_Window\0\0\0\x01\x06Window\x01\0\x01\x07onkeyup\x01\x01\x05self_\x07onkeyup\0\0\0\x1B__widl_f_set_onkeyup_Window\0\0\0\x01\x06Window\x01\0\x02\x07onkeyup\x01\x02\x05self_\x07onkeyup\x07onkeyup\0\0\0\x16__widl_f_onload_Window\0\0\0\x01\x06Window\x01\0\x01\x06onload\x01\x01\x05self_\x06onload\0\0\0\x1A__widl_f_set_onload_Window\0\0\0\x01\x06Window\x01\0\x02\x06onload\x01\x02\x05self_\x06onload\x06onload\0\0\0\x1C__widl_f_onloadeddata_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conloadeddata\x01\x01\x05self_\x0Conloadeddata\0\0\0 __widl_f_set_onloadeddata_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conloadeddata\x01\x02\x05self_\x0Conloadeddata\x0Conloadeddata\0\0\0 __widl_f_onloadedmetadata_Window\0\0\0\x01\x06Window\x01\0\x01\x10onloadedmetadata\x01\x01\x05self_\x10onloadedmetadata\0\0\0$__widl_f_set_onloadedmetadata_Window\0\0\0\x01\x06Window\x01\0\x02\x10onloadedmetadata\x01\x02\x05self_\x10onloadedmetadata\x10onloadedmetadata\0\0\0\x19__widl_f_onloadend_Window\0\0\0\x01\x06Window\x01\0\x01\tonloadend\x01\x01\x05self_\tonloadend\0\0\0\x1D__widl_f_set_onloadend_Window\0\0\0\x01\x06Window\x01\0\x02\tonloadend\x01\x02\x05self_\tonloadend\tonloadend\0\0\0\x1B__widl_f_onloadstart_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonloadstart\x01\x01\x05self_\x0Bonloadstart\0\0\0\x1F__widl_f_set_onloadstart_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonloadstart\x01\x02\x05self_\x0Bonloadstart\x0Bonloadstart\0\0\0\x1B__widl_f_onmousedown_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonmousedown\x01\x01\x05self_\x0Bonmousedown\0\0\0\x1F__widl_f_set_onmousedown_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonmousedown\x01\x02\x05self_\x0Bonmousedown\x0Bonmousedown\0\0\0\x1C__widl_f_onmouseenter_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conmouseenter\x01\x01\x05self_\x0Conmouseenter\0\0\0 __widl_f_set_onmouseenter_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conmouseenter\x01\x02\x05self_\x0Conmouseenter\x0Conmouseenter\0\0\0\x1C__widl_f_onmouseleave_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conmouseleave\x01\x01\x05self_\x0Conmouseleave\0\0\0 __widl_f_set_onmouseleave_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conmouseleave\x01\x02\x05self_\x0Conmouseleave\x0Conmouseleave\0\0\0\x1B__widl_f_onmousemove_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonmousemove\x01\x01\x05self_\x0Bonmousemove\0\0\0\x1F__widl_f_set_onmousemove_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonmousemove\x01\x02\x05self_\x0Bonmousemove\x0Bonmousemove\0\0\0\x1A__widl_f_onmouseout_Window\0\0\0\x01\x06Window\x01\0\x01\nonmouseout\x01\x01\x05self_\nonmouseout\0\0\0\x1E__widl_f_set_onmouseout_Window\0\0\0\x01\x06Window\x01\0\x02\nonmouseout\x01\x02\x05self_\nonmouseout\nonmouseout\0\0\0\x1B__widl_f_onmouseover_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonmouseover\x01\x01\x05self_\x0Bonmouseover\0\0\0\x1F__widl_f_set_onmouseover_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonmouseover\x01\x02\x05self_\x0Bonmouseover\x0Bonmouseover\0\0\0\x19__widl_f_onmouseup_Window\0\0\0\x01\x06Window\x01\0\x01\tonmouseup\x01\x01\x05self_\tonmouseup\0\0\0\x1D__widl_f_set_onmouseup_Window\0\0\0\x01\x06Window\x01\0\x02\tonmouseup\x01\x02\x05self_\tonmouseup\tonmouseup\0\0\0\x17__widl_f_onwheel_Window\0\0\0\x01\x06Window\x01\0\x01\x07onwheel\x01\x01\x05self_\x07onwheel\0\0\0\x1B__widl_f_set_onwheel_Window\0\0\0\x01\x06Window\x01\0\x02\x07onwheel\x01\x02\x05self_\x07onwheel\x07onwheel\0\0\0\x17__widl_f_onpause_Window\0\0\0\x01\x06Window\x01\0\x01\x07onpause\x01\x01\x05self_\x07onpause\0\0\0\x1B__widl_f_set_onpause_Window\0\0\0\x01\x06Window\x01\0\x02\x07onpause\x01\x02\x05self_\x07onpause\x07onpause\0\0\0\x16__widl_f_onplay_Window\0\0\0\x01\x06Window\x01\0\x01\x06onplay\x01\x01\x05self_\x06onplay\0\0\0\x1A__widl_f_set_onplay_Window\0\0\0\x01\x06Window\x01\0\x02\x06onplay\x01\x02\x05self_\x06onplay\x06onplay\0\0\0\x19__widl_f_onplaying_Window\0\0\0\x01\x06Window\x01\0\x01\tonplaying\x01\x01\x05self_\tonplaying\0\0\0\x1D__widl_f_set_onplaying_Window\0\0\0\x01\x06Window\x01\0\x02\tonplaying\x01\x02\x05self_\tonplaying\tonplaying\0\0\0\x1A__widl_f_onprogress_Window\0\0\0\x01\x06Window\x01\0\x01\nonprogress\x01\x01\x05self_\nonprogress\0\0\0\x1E__widl_f_set_onprogress_Window\0\0\0\x01\x06Window\x01\0\x02\nonprogress\x01\x02\x05self_\nonprogress\nonprogress\0\0\0\x1C__widl_f_onratechange_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conratechange\x01\x01\x05self_\x0Conratechange\0\0\0 __widl_f_set_onratechange_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conratechange\x01\x02\x05self_\x0Conratechange\x0Conratechange\0\0\0\x17__widl_f_onreset_Window\0\0\0\x01\x06Window\x01\0\x01\x07onreset\x01\x01\x05self_\x07onreset\0\0\0\x1B__widl_f_set_onreset_Window\0\0\0\x01\x06Window\x01\0\x02\x07onreset\x01\x02\x05self_\x07onreset\x07onreset\0\0\0\x18__widl_f_onresize_Window\0\0\0\x01\x06Window\x01\0\x01\x08onresize\x01\x01\x05self_\x08onresize\0\0\0\x1C__widl_f_set_onresize_Window\0\0\0\x01\x06Window\x01\0\x02\x08onresize\x01\x02\x05self_\x08onresize\x08onresize\0\0\0\x18__widl_f_onscroll_Window\0\0\0\x01\x06Window\x01\0\x01\x08onscroll\x01\x01\x05self_\x08onscroll\0\0\0\x1C__widl_f_set_onscroll_Window\0\0\0\x01\x06Window\x01\0\x02\x08onscroll\x01\x02\x05self_\x08onscroll\x08onscroll\0\0\0\x18__widl_f_onseeked_Window\0\0\0\x01\x06Window\x01\0\x01\x08onseeked\x01\x01\x05self_\x08onseeked\0\0\0\x1C__widl_f_set_onseeked_Window\0\0\0\x01\x06Window\x01\0\x02\x08onseeked\x01\x02\x05self_\x08onseeked\x08onseeked\0\0\0\x19__widl_f_onseeking_Window\0\0\0\x01\x06Window\x01\0\x01\tonseeking\x01\x01\x05self_\tonseeking\0\0\0\x1D__widl_f_set_onseeking_Window\0\0\0\x01\x06Window\x01\0\x02\tonseeking\x01\x02\x05self_\tonseeking\tonseeking\0\0\0\x18__widl_f_onselect_Window\0\0\0\x01\x06Window\x01\0\x01\x08onselect\x01\x01\x05self_\x08onselect\0\0\0\x1C__widl_f_set_onselect_Window\0\0\0\x01\x06Window\x01\0\x02\x08onselect\x01\x02\x05self_\x08onselect\x08onselect\0\0\0\x16__widl_f_onshow_Window\0\0\0\x01\x06Window\x01\0\x01\x06onshow\x01\x01\x05self_\x06onshow\0\0\0\x1A__widl_f_set_onshow_Window\0\0\0\x01\x06Window\x01\0\x02\x06onshow\x01\x02\x05self_\x06onshow\x06onshow\0\0\0\x19__widl_f_onstalled_Window\0\0\0\x01\x06Window\x01\0\x01\tonstalled\x01\x01\x05self_\tonstalled\0\0\0\x1D__widl_f_set_onstalled_Window\0\0\0\x01\x06Window\x01\0\x02\tonstalled\x01\x02\x05self_\tonstalled\tonstalled\0\0\0\x18__widl_f_onsubmit_Window\0\0\0\x01\x06Window\x01\0\x01\x08onsubmit\x01\x01\x05self_\x08onsubmit\0\0\0\x1C__widl_f_set_onsubmit_Window\0\0\0\x01\x06Window\x01\0\x02\x08onsubmit\x01\x02\x05self_\x08onsubmit\x08onsubmit\0\0\0\x19__widl_f_onsuspend_Window\0\0\0\x01\x06Window\x01\0\x01\tonsuspend\x01\x01\x05self_\tonsuspend\0\0\0\x1D__widl_f_set_onsuspend_Window\0\0\0\x01\x06Window\x01\0\x02\tonsuspend\x01\x02\x05self_\tonsuspend\tonsuspend\0\0\0\x1C__widl_f_ontimeupdate_Window\0\0\0\x01\x06Window\x01\0\x01\x0Contimeupdate\x01\x01\x05self_\x0Contimeupdate\0\0\0 __widl_f_set_ontimeupdate_Window\0\0\0\x01\x06Window\x01\0\x02\x0Contimeupdate\x01\x02\x05self_\x0Contimeupdate\x0Contimeupdate\0\0\0\x1E__widl_f_onvolumechange_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonvolumechange\x01\x01\x05self_\x0Eonvolumechange\0\0\0\"__widl_f_set_onvolumechange_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonvolumechange\x01\x02\x05self_\x0Eonvolumechange\x0Eonvolumechange\0\0\0\x19__widl_f_onwaiting_Window\0\0\0\x01\x06Window\x01\0\x01\tonwaiting\x01\x01\x05self_\tonwaiting\0\0\0\x1D__widl_f_set_onwaiting_Window\0\0\0\x01\x06Window\x01\0\x02\tonwaiting\x01\x02\x05self_\tonwaiting\tonwaiting\0\0\0\x1D__widl_f_onselectstart_Window\0\0\0\x01\x06Window\x01\0\x01\ronselectstart\x01\x01\x05self_\ronselectstart\0\0\0!__widl_f_set_onselectstart_Window\0\0\0\x01\x06Window\x01\0\x02\ronselectstart\x01\x02\x05self_\ronselectstart\ronselectstart\0\0\0\x18__widl_f_ontoggle_Window\0\0\0\x01\x06Window\x01\0\x01\x08ontoggle\x01\x01\x05self_\x08ontoggle\0\0\0\x1C__widl_f_set_ontoggle_Window\0\0\0\x01\x06Window\x01\0\x02\x08ontoggle\x01\x02\x05self_\x08ontoggle\x08ontoggle\0\0\0\x1F__widl_f_onpointercancel_Window\0\0\0\x01\x06Window\x01\0\x01\x0Fonpointercancel\x01\x01\x05self_\x0Fonpointercancel\0\0\0#__widl_f_set_onpointercancel_Window\0\0\0\x01\x06Window\x01\0\x02\x0Fonpointercancel\x01\x02\x05self_\x0Fonpointercancel\x0Fonpointercancel\0\0\0\x1D__widl_f_onpointerdown_Window\0\0\0\x01\x06Window\x01\0\x01\ronpointerdown\x01\x01\x05self_\ronpointerdown\0\0\0!__widl_f_set_onpointerdown_Window\0\0\0\x01\x06Window\x01\0\x02\ronpointerdown\x01\x02\x05self_\ronpointerdown\ronpointerdown\0\0\0\x1B__widl_f_onpointerup_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bonpointerup\x01\x01\x05self_\x0Bonpointerup\0\0\0\x1F__widl_f_set_onpointerup_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bonpointerup\x01\x02\x05self_\x0Bonpointerup\x0Bonpointerup\0\0\0\x1D__widl_f_onpointermove_Window\0\0\0\x01\x06Window\x01\0\x01\ronpointermove\x01\x01\x05self_\ronpointermove\0\0\0!__widl_f_set_onpointermove_Window\0\0\0\x01\x06Window\x01\0\x02\ronpointermove\x01\x02\x05self_\ronpointermove\ronpointermove\0\0\0\x1C__widl_f_onpointerout_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conpointerout\x01\x01\x05self_\x0Conpointerout\0\0\0 __widl_f_set_onpointerout_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conpointerout\x01\x02\x05self_\x0Conpointerout\x0Conpointerout\0\0\0\x1D__widl_f_onpointerover_Window\0\0\0\x01\x06Window\x01\0\x01\ronpointerover\x01\x01\x05self_\ronpointerover\0\0\0!__widl_f_set_onpointerover_Window\0\0\0\x01\x06Window\x01\0\x02\ronpointerover\x01\x02\x05self_\ronpointerover\ronpointerover\0\0\0\x1E__widl_f_onpointerenter_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonpointerenter\x01\x01\x05self_\x0Eonpointerenter\0\0\0\"__widl_f_set_onpointerenter_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonpointerenter\x01\x02\x05self_\x0Eonpointerenter\x0Eonpointerenter\0\0\0\x1E__widl_f_onpointerleave_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonpointerleave\x01\x01\x05self_\x0Eonpointerleave\0\0\0\"__widl_f_set_onpointerleave_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonpointerleave\x01\x02\x05self_\x0Eonpointerleave\x0Eonpointerleave\0\0\0#__widl_f_ongotpointercapture_Window\0\0\0\x01\x06Window\x01\0\x01\x13ongotpointercapture\x01\x01\x05self_\x13ongotpointercapture\0\0\0'__widl_f_set_ongotpointercapture_Window\0\0\0\x01\x06Window\x01\0\x02\x13ongotpointercapture\x01\x02\x05self_\x13ongotpointercapture\x13ongotpointercapture\0\0\0$__widl_f_onlostpointercapture_Window\0\0\0\x01\x06Window\x01\0\x01\x14onlostpointercapture\x01\x01\x05self_\x14onlostpointercapture\0\0\0(__widl_f_set_onlostpointercapture_Window\0\0\0\x01\x06Window\x01\0\x02\x14onlostpointercapture\x01\x02\x05self_\x14onlostpointercapture\x14onlostpointercapture\0\0\0!__widl_f_onanimationcancel_Window\0\0\0\x01\x06Window\x01\0\x01\x11onanimationcancel\x01\x01\x05self_\x11onanimationcancel\0\0\0%__widl_f_set_onanimationcancel_Window\0\0\0\x01\x06Window\x01\0\x02\x11onanimationcancel\x01\x02\x05self_\x11onanimationcancel\x11onanimationcancel\0\0\0\x1E__widl_f_onanimationend_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonanimationend\x01\x01\x05self_\x0Eonanimationend\0\0\0\"__widl_f_set_onanimationend_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonanimationend\x01\x02\x05self_\x0Eonanimationend\x0Eonanimationend\0\0\0$__widl_f_onanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x01\x14onanimationiteration\x01\x01\x05self_\x14onanimationiteration\0\0\0(__widl_f_set_onanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x02\x14onanimationiteration\x01\x02\x05self_\x14onanimationiteration\x14onanimationiteration\0\0\0 __widl_f_onanimationstart_Window\0\0\0\x01\x06Window\x01\0\x01\x10onanimationstart\x01\x01\x05self_\x10onanimationstart\0\0\0$__widl_f_set_onanimationstart_Window\0\0\0\x01\x06Window\x01\0\x02\x10onanimationstart\x01\x02\x05self_\x10onanimationstart\x10onanimationstart\0\0\0\"__widl_f_ontransitioncancel_Window\0\0\0\x01\x06Window\x01\0\x01\x12ontransitioncancel\x01\x01\x05self_\x12ontransitioncancel\0\0\0&__widl_f_set_ontransitioncancel_Window\0\0\0\x01\x06Window\x01\0\x02\x12ontransitioncancel\x01\x02\x05self_\x12ontransitioncancel\x12ontransitioncancel\0\0\0\x1F__widl_f_ontransitionend_Window\0\0\0\x01\x06Window\x01\0\x01\x0Fontransitionend\x01\x01\x05self_\x0Fontransitionend\0\0\0#__widl_f_set_ontransitionend_Window\0\0\0\x01\x06Window\x01\0\x02\x0Fontransitionend\x01\x02\x05self_\x0Fontransitionend\x0Fontransitionend\0\0\0\x1F__widl_f_ontransitionrun_Window\0\0\0\x01\x06Window\x01\0\x01\x0Fontransitionrun\x01\x01\x05self_\x0Fontransitionrun\0\0\0#__widl_f_set_ontransitionrun_Window\0\0\0\x01\x06Window\x01\0\x02\x0Fontransitionrun\x01\x02\x05self_\x0Fontransitionrun\x0Fontransitionrun\0\0\0!__widl_f_ontransitionstart_Window\0\0\0\x01\x06Window\x01\0\x01\x11ontransitionstart\x01\x01\x05self_\x11ontransitionstart\0\0\0%__widl_f_set_ontransitionstart_Window\0\0\0\x01\x06Window\x01\0\x02\x11ontransitionstart\x01\x02\x05self_\x11ontransitionstart\x11ontransitionstart\0\0\0$__widl_f_onwebkitanimationend_Window\0\0\0\x01\x06Window\x01\0\x01\x14onwebkitanimationend\x01\x01\x05self_\x14onwebkitanimationend\0\0\0(__widl_f_set_onwebkitanimationend_Window\0\0\0\x01\x06Window\x01\0\x02\x14onwebkitanimationend\x01\x02\x05self_\x14onwebkitanimationend\x14onwebkitanimationend\0\0\0*__widl_f_onwebkitanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x01\x1Aonwebkitanimationiteration\x01\x01\x05self_\x1Aonwebkitanimationiteration\0\0\0.__widl_f_set_onwebkitanimationiteration_Window\0\0\0\x01\x06Window\x01\0\x02\x1Aonwebkitanimationiteration\x01\x02\x05self_\x1Aonwebkitanimationiteration\x1Aonwebkitanimationiteration\0\0\0&__widl_f_onwebkitanimationstart_Window\0\0\0\x01\x06Window\x01\0\x01\x16onwebkitanimationstart\x01\x01\x05self_\x16onwebkitanimationstart\0\0\0*__widl_f_set_onwebkitanimationstart_Window\0\0\0\x01\x06Window\x01\0\x02\x16onwebkitanimationstart\x01\x02\x05self_\x16onwebkitanimationstart\x16onwebkitanimationstart\0\0\0%__widl_f_onwebkittransitionend_Window\0\0\0\x01\x06Window\x01\0\x01\x15onwebkittransitionend\x01\x01\x05self_\x15onwebkittransitionend\0\0\0)__widl_f_set_onwebkittransitionend_Window\0\0\0\x01\x06Window\x01\0\x02\x15onwebkittransitionend\x01\x02\x05self_\x15onwebkittransitionend\x15onwebkittransitionend\0\0\0\x13__widl_f_u2f_Window\x01\0\0\x01\x06Window\x01\0\x01\x03u2f\x01\x01\x05self_\x03u2f\0\0\0\x17__widl_f_onerror_Window\0\0\0\x01\x06Window\x01\0\x01\x07onerror\x01\x01\x05self_\x07onerror\0\0\0\x1B__widl_f_set_onerror_Window\0\0\0\x01\x06Window\x01\0\x02\x07onerror\x01\x02\x05self_\x07onerror\x07onerror\0\0\0 __widl_f_speech_synthesis_Window\x01\0\0\x01\x06Window\x01\0\x01\x0FspeechSynthesis\x01\x01\x05self_\x0FspeechSynthesis\0\0\0\x1C__widl_f_ontouchstart_Window\0\0\0\x01\x06Window\x01\0\x01\x0Contouchstart\x01\x01\x05self_\x0Contouchstart\0\0\0 __widl_f_set_ontouchstart_Window\0\0\0\x01\x06Window\x01\0\x02\x0Contouchstart\x01\x02\x05self_\x0Contouchstart\x0Contouchstart\0\0\0\x1A__widl_f_ontouchend_Window\0\0\0\x01\x06Window\x01\0\x01\nontouchend\x01\x01\x05self_\nontouchend\0\0\0\x1E__widl_f_set_ontouchend_Window\0\0\0\x01\x06Window\x01\0\x02\nontouchend\x01\x02\x05self_\nontouchend\nontouchend\0\0\0\x1B__widl_f_ontouchmove_Window\0\0\0\x01\x06Window\x01\0\x01\x0Bontouchmove\x01\x01\x05self_\x0Bontouchmove\0\0\0\x1F__widl_f_set_ontouchmove_Window\0\0\0\x01\x06Window\x01\0\x02\x0Bontouchmove\x01\x02\x05self_\x0Bontouchmove\x0Bontouchmove\0\0\0\x1D__widl_f_ontouchcancel_Window\0\0\0\x01\x06Window\x01\0\x01\rontouchcancel\x01\x01\x05self_\rontouchcancel\0\0\0!__widl_f_set_ontouchcancel_Window\0\0\0\x01\x06Window\x01\0\x02\rontouchcancel\x01\x02\x05self_\rontouchcancel\rontouchcancel\0\0\0\x1C__widl_f_onafterprint_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conafterprint\x01\x01\x05self_\x0Conafterprint\0\0\0 __widl_f_set_onafterprint_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conafterprint\x01\x02\x05self_\x0Conafterprint\x0Conafterprint\0\0\0\x1D__widl_f_onbeforeprint_Window\0\0\0\x01\x06Window\x01\0\x01\ronbeforeprint\x01\x01\x05self_\ronbeforeprint\0\0\0!__widl_f_set_onbeforeprint_Window\0\0\0\x01\x06Window\x01\0\x02\ronbeforeprint\x01\x02\x05self_\ronbeforeprint\ronbeforeprint\0\0\0\x1E__widl_f_onbeforeunload_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonbeforeunload\x01\x01\x05self_\x0Eonbeforeunload\0\0\0\"__widl_f_set_onbeforeunload_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonbeforeunload\x01\x02\x05self_\x0Eonbeforeunload\x0Eonbeforeunload\0\0\0\x1C__widl_f_onhashchange_Window\0\0\0\x01\x06Window\x01\0\x01\x0Conhashchange\x01\x01\x05self_\x0Conhashchange\0\0\0 __widl_f_set_onhashchange_Window\0\0\0\x01\x06Window\x01\0\x02\x0Conhashchange\x01\x02\x05self_\x0Conhashchange\x0Conhashchange\0\0\0 __widl_f_onlanguagechange_Window\0\0\0\x01\x06Window\x01\0\x01\x10onlanguagechange\x01\x01\x05self_\x10onlanguagechange\0\0\0$__widl_f_set_onlanguagechange_Window\0\0\0\x01\x06Window\x01\0\x02\x10onlanguagechange\x01\x02\x05self_\x10onlanguagechange\x10onlanguagechange\0\0\0\x19__widl_f_onmessage_Window\0\0\0\x01\x06Window\x01\0\x01\tonmessage\x01\x01\x05self_\tonmessage\0\0\0\x1D__widl_f_set_onmessage_Window\0\0\0\x01\x06Window\x01\0\x02\tonmessage\x01\x02\x05self_\tonmessage\tonmessage\0\0\0\x1E__widl_f_onmessageerror_Window\0\0\0\x01\x06Window\x01\0\x01\x0Eonmessageerror\x01\x01\x05self_\x0Eonmessageerror\0\0\0\"__widl_f_set_onmessageerror_Window\0\0\0\x01\x06Window\x01\0\x02\x0Eonmessageerror\x01\x02\x05self_\x0Eonmessageerror\x0Eonmessageerror\0\0\0\x19__widl_f_onoffline_Window\0\0\0\x01\x06Window\x01\0\x01\tonoffline\x01\x01\x05self_\tonoffline\0\0\0\x1D__widl_f_set_onoffline_Window\0\0\0\x01\x06Window\x01\0\x02\tonoffline\x01\x02\x05self_\tonoffline\tonoffline\0\0\0\x18__widl_f_ononline_Window\0\0\0\x01\x06Window\x01\0\x01\x08ononline\x01\x01\x05self_\x08ononline\0\0\0\x1C__widl_f_set_ononline_Window\0\0\0\x01\x06Window\x01\0\x02\x08ononline\x01\x02\x05self_\x08ononline\x08ononline\0\0\0\x1A__widl_f_onpagehide_Window\0\0\0\x01\x06Window\x01\0\x01\nonpagehide\x01\x01\x05self_\nonpagehide\0\0\0\x1E__widl_f_set_onpagehide_Window\0\0\0\x01\x06Window\x01\0\x02\nonpagehide\x01\x02\x05self_\nonpagehide\nonpagehide\0\0\0\x1A__widl_f_onpageshow_Window\0\0\0\x01\x06Window\x01\0\x01\nonpageshow\x01\x01\x05self_\nonpageshow\0\0\0\x1E__widl_f_set_onpageshow_Window\0\0\0\x01\x06Window\x01\0\x02\nonpageshow\x01\x02\x05self_\nonpageshow\nonpageshow\0\0\0\x1A__widl_f_onpopstate_Window\0\0\0\x01\x06Window\x01\0\x01\nonpopstate\x01\x01\x05self_\nonpopstate\0\0\0\x1E__widl_f_set_onpopstate_Window\0\0\0\x01\x06Window\x01\0\x02\nonpopstate\x01\x02\x05self_\nonpopstate\nonpopstate\0\0\0\x19__widl_f_onstorage_Window\0\0\0\x01\x06Window\x01\0\x01\tonstorage\x01\x01\x05self_\tonstorage\0\0\0\x1D__widl_f_set_onstorage_Window\0\0\0\x01\x06Window\x01\0\x02\tonstorage\x01\x02\x05self_\tonstorage\tonstorage\0\0\0\x18__widl_f_onunload_Window\0\0\0\x01\x06Window\x01\0\x01\x08onunload\x01\x01\x05self_\x08onunload\0\0\0\x1C__widl_f_set_onunload_Window\0\0\0\x01\x06Window\x01\0\x02\x08onunload\x01\x02\x05self_\x08onunload\x08onunload\0\0\0\x1D__widl_f_local_storage_Window\x01\0\0\x01\x06Window\x01\0\x01\x0ClocalStorage\x01\x01\x05self_\x0ClocalStorage\0\0\0\x14__widl_f_atob_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x04atob\x04atob\0\0\0\x14__widl_f_btoa_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x04btoa\x04btoa\0\0\0\x1E__widl_f_clear_interval_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\rclearInterval\0\0\0*__widl_f_clear_interval_with_handle_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\rclearInterval\0\0\0\x1D__widl_f_clear_timeout_Window\0\0\0\x01\x06Window\x01\0\0\x01\x01\x05self_\x0CclearTimeout\0\0\0)__widl_f_clear_timeout_with_handle_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x06handle\x0CclearTimeout\0\0\0;__widl_f_create_image_bitmap_with_html_image_element_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0;__widl_f_create_image_bitmap_with_html_video_element_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0<__widl_f_create_image_bitmap_with_html_canvas_element_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0-__widl_f_create_image_bitmap_with_blob_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\03__widl_f_create_image_bitmap_with_image_data_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0D__widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\05__widl_f_create_image_bitmap_with_image_bitmap_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\06__widl_f_create_image_bitmap_with_buffer_source_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\01__widl_f_create_image_bitmap_with_u8_array_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07a_image\x11createImageBitmap\0\0\0___widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0___widl_f_create_image_bitmap_with_html_video_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0`__widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0Q__widl_f_create_image_bitmap_with_blob_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0W__widl_f_create_image_bitmap_with_image_data_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0h__widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0Y__widl_f_create_image_bitmap_with_image_bitmap_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0Z__widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0U__widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\0\0\0\"__widl_f_fetch_with_request_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x05input\x05fetch\0\0\0\x1E__widl_f_fetch_with_str_Window\0\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x05input\x05fetch\0\0\0+__widl_f_fetch_with_request_and_init_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x05input\x04init\x05fetch\0\0\0'__widl_f_fetch_with_str_and_init_Window\0\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x05input\x04init\x05fetch\0\0\0*__widl_f_set_interval_with_callback_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\x0BsetInterval\0\0\0D__widl_f_set_interval_with_callback_and_timeout_and_arguments_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\targuments\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x0Barguments_1\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0Barguments_7\x0BsetInterval\0\0\0%__widl_f_set_interval_with_str_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\x0BsetInterval\0\0\0<__widl_f_set_interval_with_str_and_timeout_and_unused_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x06unused\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x08unused_1\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\x0BsetInterval\0\0\0)__widl_f_set_timeout_with_callback_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\nsetTimeout\0\0\0C__widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\targuments\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x0Barguments_1\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x0Barguments_1\x0Barguments_2\x0Barguments_3\x0Barguments_4\x0Barguments_5\x0Barguments_6\x0Barguments_7\nsetTimeout\0\0\0$__widl_f_set_timeout_with_str_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x02\x05self_\x07handler\nsetTimeout\0\0\0;__widl_f_set_timeout_with_str_and_timeout_and_unused_Window\x01\x01\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x06unused\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x03\x05self_\x07handler\x07timeout\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x04\x05self_\x07handler\x07timeout\x08unused_1\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x05\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x06\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x07\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window\x01\0\0\x01\x06Window\x01\0\0\x01\x08\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window\x01\0\0\x01\x06Window\x01\0\0\x01\t\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window\x01\0\0\x01\x06Window\x01\0\0\x01\n\x05self_\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\nsetTimeout\0\0\0\x16__widl_f_origin_Window\0\0\0\x01\x06Window\x01\0\x01\x06origin\x01\x01\x05self_\x06origin\0\0\0!__widl_f_is_secure_context_Window\0\0\0\x01\x06Window\x01\0\x01\x0FisSecureContext\x01\x01\x05self_\x0FisSecureContext\0\0\0\x1A__widl_f_indexed_db_Window\x01\0\0\x01\x06Window\x01\0\x01\tindexedDB\x01\x01\x05self_\tindexedDB\0\0\0\x16__widl_f_caches_Window\x01\0\0\x01\x06Window\x01\0\x01\x06caches\x01\x01\x05self_\x06caches\0\0\0\x1F__widl_f_session_storage_Window\x01\0\0\x01\x06Window\x01\0\x01\x0EsessionStorage\x01\x01\x05self_\x0EsessionStorage\0\0\0\0\x1Ebuild-web-sys-3a70f0062dec68bf\0"
};
