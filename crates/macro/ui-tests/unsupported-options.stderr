warning: use of deprecated function `RustStruct::new::{closure#0}::_::constructor`: async constructors produce invalid TS code and support will be removed in the future
  --> ui-tests/unsupported-options.rs:15:18
   |
15 |     pub async fn new() -> Self {
   |                  ^^^
   |
   = note: `#[warn(deprecated)]` on by default

error[E0277]: JavaScript constructors are not supported for `RustEnum`
  --> ui-tests/unsupported-options.rs:56:12
   |
49 | #[wasm_bindgen]
   | --------------- in this procedural macro expansion
...
56 |     pub fn new() -> Self {
   |            ^^^ this function cannot be the constructor of `RustEnum`
   |
   = help: the trait `SupportsConstructor` is not implemented for `RustEnum`
   = note: `#[wasm_bindgen(constructor)]` is only supported for `struct`s and cannot be used for `enum`s.
   = note: Consider removing the `constructor` option and using a regular static method instead.
   = help: the trait `SupportsConstructor` is implemented for `RustStruct`
note: required by a bound in `CheckSupportsConstructor`
  --> $WORKSPACE/src/rt/marker.rs
   |
   | pub struct CheckSupportsConstructor<T: SupportsConstructor>(T);
   |                                        ^^^^^^^^^^^^^^^^^^^ required by this bound in `CheckSupportsConstructor`
   = note: this error originates in the attribute macro `wasm_bindgen::prelude::__wasm_bindgen_class_marker` which comes from the expansion of the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: JavaScript instance getters and setters are not supported for `RustEnum`
  --> ui-tests/unsupported-options.rs:61:12
   |
49 | #[wasm_bindgen]
   | --------------- in this procedural macro expansion
...
61 |     pub fn prop(self) -> u32 {
   |            ^^^^ this method cannot be a getter or setter for `RustEnum`
   |
   = help: the trait `SupportsInstanceProperty` is not implemented for `RustEnum`
   = note: `#[wasm_bindgen(getter)]` and `#[wasm_bindgen(setter)]` are only supported for `struct`s and cannot be used for `enum`s.
   = help: the trait `SupportsInstanceProperty` is implemented for `RustStruct`
note: required by a bound in `CheckSupportsInstanceProperty`
  --> $WORKSPACE/src/rt/marker.rs
   |
   | pub struct CheckSupportsInstanceProperty<T: SupportsInstanceProperty>(T);
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `CheckSupportsInstanceProperty`
   = note: this error originates in the attribute macro `wasm_bindgen::prelude::__wasm_bindgen_class_marker` which comes from the expansion of the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: JavaScript instance getters and setters are not supported for `RustEnum`
  --> ui-tests/unsupported-options.rs:65:12
   |
49 | #[wasm_bindgen]
   | --------------- in this procedural macro expansion
...
65 |     pub fn set_prop(self, _value: u32) {}
   |            ^^^^^^^^ this method cannot be a getter or setter for `RustEnum`
   |
   = help: the trait `SupportsInstanceProperty` is not implemented for `RustEnum`
   = note: `#[wasm_bindgen(getter)]` and `#[wasm_bindgen(setter)]` are only supported for `struct`s and cannot be used for `enum`s.
   = help: the trait `SupportsInstanceProperty` is implemented for `RustStruct`
note: required by a bound in `CheckSupportsInstanceProperty`
  --> $WORKSPACE/src/rt/marker.rs
   |
   | pub struct CheckSupportsInstanceProperty<T: SupportsInstanceProperty>(T);
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `CheckSupportsInstanceProperty`
   = note: this error originates in the attribute macro `wasm_bindgen::prelude::__wasm_bindgen_class_marker` which comes from the expansion of the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: JavaScript static getters and setters are not supported for `RustEnum`
  --> ui-tests/unsupported-options.rs:68:12
   |
49 | #[wasm_bindgen]
   | --------------- in this procedural macro expansion
...
68 |     pub fn static_prop() -> u32 {
   |            ^^^^^^^^^^^ this static function cannot be a static getter or setter on `RustEnum`
   |
   = help: the trait `SupportsStaticProperty` is not implemented for `RustEnum`
   = note: `#[wasm_bindgen(getter)]` and `#[wasm_bindgen(setter)]` are only supported for `struct`s and cannot be used for `enum`s.
   = help: the trait `SupportsStaticProperty` is implemented for `RustStruct`
note: required by a bound in `CheckSupportsStaticProperty`
  --> $WORKSPACE/src/rt/marker.rs
   |
   | pub struct CheckSupportsStaticProperty<T: SupportsStaticProperty>(T);
   |                                           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `CheckSupportsStaticProperty`
   = note: this error originates in the attribute macro `wasm_bindgen::prelude::__wasm_bindgen_class_marker` which comes from the expansion of the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: JavaScript static getters and setters are not supported for `RustEnum`
  --> ui-tests/unsupported-options.rs:72:12
   |
49 | #[wasm_bindgen]
   | --------------- in this procedural macro expansion
...
72 |     pub fn set_static_prop(_value: u32) {}
   |            ^^^^^^^^^^^^^^^ this static function cannot be a static getter or setter on `RustEnum`
   |
   = help: the trait `SupportsStaticProperty` is not implemented for `RustEnum`
   = note: `#[wasm_bindgen(getter)]` and `#[wasm_bindgen(setter)]` are only supported for `struct`s and cannot be used for `enum`s.
   = help: the trait `SupportsStaticProperty` is implemented for `RustStruct`
note: required by a bound in `CheckSupportsStaticProperty`
  --> $WORKSPACE/src/rt/marker.rs
   |
   | pub struct CheckSupportsStaticProperty<T: SupportsStaticProperty>(T);
   |                                           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `CheckSupportsStaticProperty`
   = note: this error originates in the attribute macro `wasm_bindgen::prelude::__wasm_bindgen_class_marker` which comes from the expansion of the attribute macro `wasm_bindgen` (in Nightly builds, run with -Z macro-backtrace for more info)
